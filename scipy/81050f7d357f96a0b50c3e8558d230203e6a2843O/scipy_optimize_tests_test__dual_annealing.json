[{"lineNumber": 21, "col_offset": 24, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "weirdfunc", "type": "Callable[[Any], Any]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "hd_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "nbtestvalues", "type": "int"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "high_temperature", "type": "int"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "low_temperature", "type": "float"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "qv", "type": "float"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "seed", "type": "int"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "rs", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "nb_fun_call", "type": "int"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "ngev", "type": "int"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "args", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "y", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "nb_fun_call", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "y", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "ngev", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "dim", "type": "int"}, {"lineNumber": 68, "col_offset": 14, "nodeName": "size", "type": "int"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "vd", "type": "scipy.optimize._dual_annealing.VisitingDistribution"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "values", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "x_step_low", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "values", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "x_step_high", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "vd", "type": "scipy.optimize._dual_annealing.VisitingDistribution"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "values", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "owf", "type": "scipy.optimize._dual_annealing.ObjectiveFunWrapper"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "es", "type": "scipy.optimize._dual_annealing.EnergyState"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "seed", "type": "int"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "wrong_bounds", "type": "List[Union[Tuple[float, float], Tuple[int, int]]]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[Any, int]]]"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[int, Any]]]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[int, Any]]]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "minimizer_opts", "type": "Dict[str, Callable[..., Any]]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 29, "col_offset": 25, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 36, "col_offset": 18, "nodeName": "check_random_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 36, "col_offset": 37, "nodeName": "seed", "type": "int"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "shift", "type": "Any"}, {"lineNumber": 52, "col_offset": 20, "nodeName": "args", "type": "Any"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "shift", "type": "int"}, {"lineNumber": 56, "col_offset": 45, "nodeName": "shift", "type": "Union[int, Any]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 62, "col_offset": 15, "nodeName": "rosen_der", "type": "Callable[[Any], Any]"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "x", "type": "Any"}, {"lineNumber": 65, "col_offset": 13, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 66, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 68, "col_offset": 14, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 69, "col_offset": 13, "nodeName": "VisitingDistribution", "type": "Type[scipy.optimize._dual_annealing.VisitingDistribution]"}, {"lineNumber": 69, "col_offset": 34, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 69, "col_offset": 41, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 69, "col_offset": 48, "nodeName": "qv", "type": "float"}, {"lineNumber": 69, "col_offset": 57, "nodeName": "rs", "type": "Any"}, {"lineNumber": 70, "col_offset": 17, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 70, "col_offset": 26, "nodeName": "dim", "type": "int"}, {"lineNumber": 71, "col_offset": 21, "nodeName": "visiting", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "values", "type": "Any"}, {"lineNumber": 71, "col_offset": 44, "nodeName": "high_temperature", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 74, "col_offset": 17, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 74, "col_offset": 26, "nodeName": "dim", "type": "int"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "visiting", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 75, "col_offset": 34, "nodeName": "values", "type": "Any"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "dim", "type": "int"}, {"lineNumber": 75, "col_offset": 47, "nodeName": "high_temperature", "type": "int"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 80, "col_offset": 13, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 83, "col_offset": 13, "nodeName": "VisitingDistribution", "type": "Type[scipy.optimize._dual_annealing.VisitingDistribution]"}, {"lineNumber": 83, "col_offset": 34, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 83, "col_offset": 48, "nodeName": "qv", "type": "float"}, {"lineNumber": 83, "col_offset": 57, "nodeName": "rs", "type": "Any"}, {"lineNumber": 87, "col_offset": 17, "nodeName": "visit_fn", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 87, "col_offset": 29, "nodeName": "high_temperature", "type": "int"}, {"lineNumber": 87, "col_offset": 52, "nodeName": "nbtestvalues", "type": "int"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assert_array_less", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "assert_array_less", "type": "Any"}, {"lineNumber": 97, "col_offset": 14, "nodeName": "ObjectiveFunWrapper", "type": "Type[scipy.optimize._dual_annealing.ObjectiveFunWrapper]"}, {"lineNumber": 97, "col_offset": 34, "nodeName": "weirdfunc", "type": "Callable[[Any], Any]"}, {"lineNumber": 98, "col_offset": 13, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 100, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 101, "col_offset": 13, "nodeName": "EnergyState", "type": "Type[scipy.optimize._dual_annealing.EnergyState]"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "lower", "type": "numpy.ndarray"}, {"lineNumber": 101, "col_offset": 32, "nodeName": "upper", "type": "numpy.ndarray"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 102, "col_offset": 34, "nodeName": "reset", "type": "Callable[..., Any]"}, {"lineNumber": 102, "col_offset": 44, "nodeName": "owf", "type": "scipy.optimize._dual_annealing.ObjectiveFunWrapper"}, {"lineNumber": 105, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 106, "col_offset": 12, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 106, "col_offset": 23, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 111, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 111, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 111, "col_offset": 40, "nodeName": "hd_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 116, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 116, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 116, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 121, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 121, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 121, "col_offset": 40, "nodeName": "hd_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 126, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 126, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 130, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 130, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 130, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 135, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 135, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 135, "col_offset": 50, "nodeName": "weirdfunc", "type": "Callable[[Any], Any]"}, {"lineNumber": 136, "col_offset": 16, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 140, "col_offset": 15, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 30, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 41, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 150, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 150, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 150, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 151, "col_offset": 16, "nodeName": "wrong_bounds", "type": "List[Union[Tuple[float, float], Tuple[int, int]]]"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 155, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 155, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 155, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 156, "col_offset": 16, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[Any, int]]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 158, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 158, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[int, Any]]]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 161, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 161, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 162, "col_offset": 16, "nodeName": "invalid_bounds", "type": "List[Union[Tuple[int, int], Tuple[int, Any]]]"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 165, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 175, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 175, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 175, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 181, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 181, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 181, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 186, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 186, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 186, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 192, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 192, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 192, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 199, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 199, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 199, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 209, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 209, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 209, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 217, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 217, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 217, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 225, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 233, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 233, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 233, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 241, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 241, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 241, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 249, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 249, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 249, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 257, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 257, "col_offset": 29, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 257, "col_offset": 40, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 263, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 263, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 263, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 264, "col_offset": 22, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 265, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 265, "col_offset": 34, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 265, "col_offset": 50, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 266, "col_offset": 22, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "rosen_der_wrapper", "type": "Callable[..., Any]"}, {"lineNumber": 272, "col_offset": 14, "nodeName": "dual_annealing", "type": "Callable[..., Any]"}, {"lineNumber": 272, "col_offset": 29, "nodeName": "rosen", "type": "Callable[[Any], Any]"}, {"lineNumber": 272, "col_offset": 36, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 29, "col_offset": 25, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 36, "col_offset": 37, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 62, "col_offset": 29, "nodeName": "args", "type": "Any"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 66, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 66, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 67, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 69, "col_offset": 48, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 69, "col_offset": 57, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 70, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 21, "nodeName": "vd", "type": "scipy.optimize._dual_annealing.VisitingDistribution"}, {"lineNumber": 71, "col_offset": 44, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "not_equal", "type": "Any"}, {"lineNumber": 73, "col_offset": 34, "nodeName": "x_step_low", "type": "Any"}, {"lineNumber": 74, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "vd", "type": "scipy.optimize._dual_annealing.VisitingDistribution"}, {"lineNumber": 75, "col_offset": 47, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 77, "col_offset": 21, "nodeName": "not_equal", "type": "Any"}, {"lineNumber": 80, "col_offset": 18, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 83, "col_offset": 48, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 83, "col_offset": 57, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 87, "col_offset": 17, "nodeName": "vd", "type": "scipy.optimize._dual_annealing.VisitingDistribution"}, {"lineNumber": 87, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 87, "col_offset": 52, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 93, "col_offset": 26, "nodeName": "min", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "values", "type": "Any"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "max", "type": "Any"}, {"lineNumber": 94, "col_offset": 40, "nodeName": "values", "type": "Any"}, {"lineNumber": 97, "col_offset": 34, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 98, "col_offset": 18, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 100, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "lu", "type": "List[Any]"}, {"lineNumber": 102, "col_offset": 34, "nodeName": "es", "type": "scipy.optimize._dual_annealing.EnergyState"}, {"lineNumber": 102, "col_offset": 49, "nodeName": "check_random_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 106, "col_offset": 12, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 106, "col_offset": 23, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 106, "col_offset": 44, "nodeName": "seed", "type": "int"}, {"lineNumber": 111, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 111, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 116, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 116, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 121, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 121, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 126, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 130, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 130, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 135, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 136, "col_offset": 16, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 140, "col_offset": 30, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 140, "col_offset": 41, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 140, "col_offset": 62, "nodeName": "seed", "type": "int"}, {"lineNumber": 150, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 155, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 157, "col_offset": 39, "nodeName": "inf", "type": "Any"}, {"lineNumber": 158, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 160, "col_offset": 39, "nodeName": "nan", "type": "Any"}, {"lineNumber": 161, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 165, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 175, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 175, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 181, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 181, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 186, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 186, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 192, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 192, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 199, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 199, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 200, "col_offset": 38, "nodeName": "callback", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 209, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 209, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 210, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 217, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 217, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 218, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 226, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 233, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 233, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 234, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 241, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 241, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 242, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 249, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 249, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 250, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 257, "col_offset": 29, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 257, "col_offset": 40, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 258, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, str]"}, {"lineNumber": 259, "col_offset": 34, "nodeName": "seed", "type": "int"}, {"lineNumber": 263, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 264, "col_offset": 22, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 265, "col_offset": 50, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 266, "col_offset": 22, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 272, "col_offset": 36, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 273, "col_offset": 50, "nodeName": "minimizer_opts", "type": "Dict[str, Callable[..., Any]]"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 34, "nodeName": "x_step_high", "type": "Any"}, {"lineNumber": 80, "col_offset": 23, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 93, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "ld_bounds", "type": "List[Tuple[float, float]]"}, {"lineNumber": 106, "col_offset": 44, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 154, "col_offset": 37, "nodeName": "inf", "type": "Any"}, {"lineNumber": 157, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 160, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 200, "col_offset": 38, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 259, "col_offset": 34, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 56, "col_offset": 32, "nodeName": "size", "type": "Any"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "x", "type": "Any"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 80, "col_offset": 23, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "self", "type": "TestDualAnnealing"}, {"lineNumber": 154, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 56, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "shift", "type": "Union[int, Any]"}]