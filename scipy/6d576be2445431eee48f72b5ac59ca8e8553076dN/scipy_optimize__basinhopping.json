[{"lineNumber": 703, "col_offset": 0, "nodeName": "_test_func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 709, "col_offset": 0, "nodeName": "_test_func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 10, "col_offset": 0, "nodeName": "__all__", "type": "List[str]"}, {"lineNumber": 13, "col_offset": 14, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 181, "col_offset": 23, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 287, "col_offset": 17, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 625, "col_offset": 4, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 628, "col_offset": 4, "nodeName": "rng", "type": "Any"}, {"lineNumber": 633, "col_offset": 4, "nodeName": "wrapped_minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 654, "col_offset": 4, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 661, "col_offset": 4, "nodeName": "metropolis", "type": "Metropolis"}, {"lineNumber": 667, "col_offset": 4, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 672, "col_offset": 4, "nodeName": "message", "type": "List[str]"}, {"lineNumber": 674, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 694, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 694, "col_offset": 10, "nodeName": "res", "type": "Any"}, {"lineNumber": 695, "col_offset": 4, "nodeName": "lowest_optimization_result", "type": "Any"}, {"lineNumber": 696, "col_offset": 4, "nodeName": "x", "type": "Any"}, {"lineNumber": 697, "col_offset": 4, "nodeName": "fun", "type": "Any"}, {"lineNumber": 697, "col_offset": 14, "nodeName": "fun", "type": "Any"}, {"lineNumber": 698, "col_offset": 4, "nodeName": "message", "type": "List[str]"}, {"lineNumber": 698, "col_offset": 18, "nodeName": "message", "type": "List[str]"}, {"lineNumber": 699, "col_offset": 4, "nodeName": "nit", "type": "int"}, {"lineNumber": 700, "col_offset": 11, "nodeName": "res", "type": "Any"}, {"lineNumber": 704, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 706, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 710, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 712, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 718, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 721, "col_offset": 4, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 722, "col_offset": 4, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 724, "col_offset": 4, "nodeName": "ret", "type": "Any"}, {"lineNumber": 730, "col_offset": 4, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 731, "col_offset": 4, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 732, "col_offset": 4, "nodeName": "ret", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 21, "col_offset": 22, "nodeName": "minres", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "minres", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "step_taking", "type": "AdaptiveStepsize"}, {"lineNumber": 61, "col_offset": 27, "nodeName": "step_taking", "type": "AdaptiveStepsize"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "disp", "type": "bool"}, {"lineNumber": 63, "col_offset": 20, "nodeName": "disp", "type": "bool"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "nstep", "type": "int"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "minimization_failures", "type": "int"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "energy", "type": "Any"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "fun", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "disp", "type": "bool"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "storage", "type": "Storage"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "x_after_step", "type": "Any"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "x_after_step", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "x_after_quench", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "x", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "energy_after_quench", "type": "Any"}, {"lineNumber": 106, "col_offset": 30, "nodeName": "fun", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "accept", "type": "bool"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "test", "type": "Metropolis"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "nstep", "type": "int"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 154, "col_offset": 11, "nodeName": "accept", "type": "bool"}, {"lineNumber": 160, "col_offset": 11, "nodeName": "disp", "type": "bool"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "xtrial", "type": "Any"}, {"lineNumber": 167, "col_offset": 22, "nodeName": "x", "type": "Any"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "energy_trial", "type": "Any"}, {"lineNumber": 168, "col_offset": 28, "nodeName": "fun", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "accept", "type": "bool"}, {"lineNumber": 169, "col_offset": 22, "nodeName": "accept", "type": "bool"}, {"lineNumber": 171, "col_offset": 15, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "takestep", "type": "RandomDisplacement"}, {"lineNumber": 206, "col_offset": 24, "nodeName": "takestep", "type": "RandomDisplacement"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "target_accept_rate", "type": "float"}, {"lineNumber": 207, "col_offset": 34, "nodeName": "accept_rate", "type": "float"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "interval", "type": "int"}, {"lineNumber": 208, "col_offset": 24, "nodeName": "interval", "type": "int"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "factor", "type": "float"}, {"lineNumber": 209, "col_offset": 22, "nodeName": "factor", "type": "float"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "verbose", "type": "bool"}, {"lineNumber": 210, "col_offset": 23, "nodeName": "verbose", "type": "bool"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "nstep", "type": "int"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "nstep_tot", "type": "int"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "naccept", "type": "int"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "old_stepsize", "type": "Any"}, {"lineNumber": 220, "col_offset": 23, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "accept_rate", "type": "float"}, {"lineNumber": 229, "col_offset": 11, "nodeName": "verbose", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "nstep", "type": "int"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "nstep_tot", "type": "int"}, {"lineNumber": 244, "col_offset": 11, "nodeName": "accept", "type": "bool"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 262, "col_offset": 24, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 268, "col_offset": 15, "nodeName": "x", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "minimizer", "type": "Callable[..., Any]"}, {"lineNumber": 276, "col_offset": 25, "nodeName": "minimizer", "type": "Callable[..., Any]"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "func", "type": "Callable[[Any], Any]"}, {"lineNumber": 277, "col_offset": 20, "nodeName": "func", "type": "Callable[[Any], Any]"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 278, "col_offset": 22, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "beta", "type": "float"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 311, "col_offset": 8, "nodeName": "w", "type": "float"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "rand", "type": "Any"}, {"lineNumber": 625, "col_offset": 9, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 625, "col_offset": 18, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 628, "col_offset": 10, "nodeName": "check_random_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 628, "col_offset": 29, "nodeName": "seed", "type": "None"}, {"lineNumber": 631, "col_offset": 7, "nodeName": "minimizer_kwargs", "type": "Dict[str, str]"}, {"lineNumber": 632, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Dict[nothing, nothing]"}, {"lineNumber": 633, "col_offset": 24, "nodeName": "MinimizerWrapper", "type": "Type[MinimizerWrapper]"}, {"lineNumber": 633, "col_offset": 41, "nodeName": "minimize", "type": "Callable[..., Any]"}, {"lineNumber": 633, "col_offset": 66, "nodeName": "func", "type": "Callable[[Any], Any]"}, {"lineNumber": 637, "col_offset": 7, "nodeName": "take_step", "type": "None"}, {"lineNumber": 649, "col_offset": 8, "nodeName": "displace", "type": "RandomDisplacement"}, {"lineNumber": 650, "col_offset": 8, "nodeName": "take_step_wrapped", "type": "AdaptiveStepsize"}, {"lineNumber": 655, "col_offset": 7, "nodeName": "accept_test", "type": "None"}, {"lineNumber": 658, "col_offset": 8, "nodeName": "accept_tests", "type": "List[Union[Any, Metropolis]]"}, {"lineNumber": 661, "col_offset": 17, "nodeName": "Metropolis", "type": "Type[Metropolis]"}, {"lineNumber": 661, "col_offset": 28, "nodeName": "T", "type": "float"}, {"lineNumber": 662, "col_offset": 4, "nodeName": "append", "type": "Callable"}, {"lineNumber": 662, "col_offset": 24, "nodeName": "metropolis", "type": "Metropolis"}, {"lineNumber": 664, "col_offset": 7, "nodeName": "niter_success", "type": "None"}, {"lineNumber": 665, "col_offset": 8, "nodeName": "niter_success", "type": "int"}, {"lineNumber": 667, "col_offset": 9, "nodeName": "BasinHoppingRunner", "type": "Type[BasinHoppingRunner]"}, {"lineNumber": 667, "col_offset": 28, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 667, "col_offset": 32, "nodeName": "wrapped_minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 667, "col_offset": 51, "nodeName": "take_step_wrapped", "type": "AdaptiveStepsize"}, {"lineNumber": 668, "col_offset": 28, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 671, "col_offset": 4, "nodeName": "count", "type": "int"}, {"lineNumber": 671, "col_offset": 11, "nodeName": "i", "type": "int"}, {"lineNumber": 674, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 674, "col_offset": 19, "nodeName": "niter", "type": "int"}, {"lineNumber": 675, "col_offset": 8, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 686, "col_offset": 8, "nodeName": "count", "type": "int"}, {"lineNumber": 687, "col_offset": 11, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 694, "col_offset": 10, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 695, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 695, "col_offset": 37, "nodeName": "get_lowest", "type": "Callable[[], Any]"}, {"lineNumber": 696, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 696, "col_offset": 12, "nodeName": "copy", "type": "Any"}, {"lineNumber": 696, "col_offset": 20, "nodeName": "x", "type": "Any"}, {"lineNumber": 697, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 697, "col_offset": 14, "nodeName": "lowest_optimization_result", "type": "Any"}, {"lineNumber": 698, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 699, "col_offset": 4, "nodeName": "res", "type": "Any"}, {"lineNumber": 699, "col_offset": 14, "nodeName": "i", "type": "int"}, {"lineNumber": 712, "col_offset": 9, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 713, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 714, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 715, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 715, "col_offset": 14, "nodeName": "df", "type": "Any"}, {"lineNumber": 719, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 722, "col_offset": 9, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 723, "col_offset": 4, "nodeName": "minimize", "type": "Callable[..., Any]"}, {"lineNumber": 723, "col_offset": 28, "nodeName": "_test_func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 723, "col_offset": 49, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 724, "col_offset": 10, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 724, "col_offset": 23, "nodeName": "_test_func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 724, "col_offset": 44, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 726, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 727, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 727, "col_offset": 10, "nodeName": "ret", "type": "Any"}, {"lineNumber": 729, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 731, "col_offset": 9, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 732, "col_offset": 10, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 732, "col_offset": 23, "nodeName": "_test_func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 732, "col_offset": 37, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 734, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 735, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 735, "col_offset": 10, "nodeName": "ret", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "_add", "type": "Callable[[Any], Any]"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "minres", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "self", "type": "Storage"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 22, "col_offset": 24, "nodeName": "copy", "type": "Any"}, {"lineNumber": 22, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 25, "col_offset": 11, "nodeName": "fun", "type": "Any"}, {"lineNumber": 25, "col_offset": 24, "nodeName": "fun", "type": "Any"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "self", "type": "Storage"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "copy", "type": "Any"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 68, "col_offset": 19, "nodeName": "OptimizeResult", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 72, "col_offset": 17, "nodeName": "minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 72, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "success", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "minimization_failures", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "disp", "type": "bool"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 77, "col_offset": 17, "nodeName": "copy", "type": "Any"}, {"lineNumber": 77, "col_offset": 25, "nodeName": "x", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "minres", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 83, "col_offset": 23, "nodeName": "Storage", "type": "Type[Storage]"}, {"lineNumber": 83, "col_offset": 31, "nodeName": "minres", "type": "Any"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 85, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 86, "col_offset": 28, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "njev", "type": "Any"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "njev", "type": "Any"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 89, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "nhev", "type": "Any"}, {"lineNumber": 90, "col_offset": 28, "nodeName": "nhev", "type": "Any"}, {"lineNumber": 100, "col_offset": 23, "nodeName": "copy", "type": "Any"}, {"lineNumber": 100, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "step_taking", "type": "AdaptiveStepsize"}, {"lineNumber": 101, "col_offset": 40, "nodeName": "x_after_step", "type": "Any"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "minimizer", "type": "MinimizerWrapper"}, {"lineNumber": 104, "col_offset": 32, "nodeName": "x_after_step", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "minres", "type": "Any"}, {"lineNumber": 106, "col_offset": 30, "nodeName": "minres", "type": "Any"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "success", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "minimization_failures", "type": "Any"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "disp", "type": "bool"}, {"lineNumber": 112, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 113, "col_offset": 29, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "njev", "type": "Any"}, {"lineNumber": 115, "col_offset": 29, "nodeName": "njev", "type": "Any"}, {"lineNumber": 116, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 116, "col_offset": 19, "nodeName": "minres", "type": "Any"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "nhev", "type": "Any"}, {"lineNumber": 117, "col_offset": 29, "nodeName": "nhev", "type": "Any"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 126, "col_offset": 12, "nodeName": "testres", "type": "bool"}, {"lineNumber": 139, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 139, "col_offset": 19, "nodeName": "step_taking", "type": "AdaptiveStepsize"}, {"lineNumber": 144, "col_offset": 15, "nodeName": "accept", "type": "bool"}, {"lineNumber": 144, "col_offset": 23, "nodeName": "minres", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "accept", "type": "bool"}, {"lineNumber": 152, "col_offset": 16, "nodeName": "minres", "type": "Any"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "_monte_carlo_step", "type": "Callable[[], Any]"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "energy", "type": "Any"}, {"lineNumber": 155, "col_offset": 26, "nodeName": "fun", "type": "Any"}, {"lineNumber": 156, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 160, "col_offset": 11, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 162, "col_offset": 15, "nodeName": "new_global_min", "type": "bool"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 167, "col_offset": 22, "nodeName": "minres", "type": "Any"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 168, "col_offset": 28, "nodeName": "minres", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 175, "col_offset": 17, "nodeName": "get_lowest", "type": "Callable[[], Any]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 217, "col_offset": 15, "nodeName": "take_step", "type": "Callable[[Any], Any]"}, {"lineNumber": 217, "col_offset": 30, "nodeName": "x", "type": "Any"}, {"lineNumber": 220, "col_offset": 23, "nodeName": "takestep", "type": "Any"}, {"lineNumber": 221, "col_offset": 44, "nodeName": "nstep", "type": "int"}, {"lineNumber": 222, "col_offset": 11, "nodeName": "accept_rate", "type": "float"}, {"lineNumber": 222, "col_offset": 25, "nodeName": "target_accept_rate", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 225, "col_offset": 38, "nodeName": "factor", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 228, "col_offset": 38, "nodeName": "factor", "type": "Any"}, {"lineNumber": 229, "col_offset": 11, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 240, "col_offset": 15, "nodeName": "takestep", "type": "Any"}, {"lineNumber": 240, "col_offset": 29, "nodeName": "x", "type": "Any"}, {"lineNumber": 245, "col_offset": 12, "nodeName": "naccept", "type": "int"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "self", "type": "RandomDisplacement"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "self", "type": "RandomDisplacement"}, {"lineNumber": 263, "col_offset": 26, "nodeName": "check_random_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 263, "col_offset": 45, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 266, "col_offset": 13, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 266, "col_offset": 53, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 281, "col_offset": 11, "nodeName": "func", "type": "Callable[[Any], Any]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "self", "type": "Metropolis"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "self", "type": "Metropolis"}, {"lineNumber": 303, "col_offset": 26, "nodeName": "check_random_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 303, "col_offset": 45, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "exp", "type": "Callable[[SupportsFloat], float]"}, {"lineNumber": 312, "col_offset": 15, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 313, "col_offset": 15, "nodeName": "w", "type": "float"}, {"lineNumber": 313, "col_offset": 20, "nodeName": "rand", "type": "Any"}, {"lineNumber": 319, "col_offset": 15, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 625, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 632, "col_offset": 27, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 633, "col_offset": 41, "nodeName": "optimize", "type": "module"}, {"lineNumber": 634, "col_offset": 43, "nodeName": "minimizer_kwargs", "type": "Dict[str, str]"}, {"lineNumber": 642, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 642, "col_offset": 19, "nodeName": "take_step", "type": "Any"}, {"lineNumber": 643, "col_offset": 12, "nodeName": "take_step_wrapped", "type": "AdaptiveStepsize"}, {"lineNumber": 646, "col_offset": 12, "nodeName": "take_step_wrapped", "type": "Any"}, {"lineNumber": 646, "col_offset": 32, "nodeName": "take_step", "type": "Any"}, {"lineNumber": 649, "col_offset": 19, "nodeName": "RandomDisplacement", "type": "Type[RandomDisplacement]"}, {"lineNumber": 650, "col_offset": 28, "nodeName": "AdaptiveStepsize", "type": "Type[AdaptiveStepsize]"}, {"lineNumber": 650, "col_offset": 45, "nodeName": "displace", "type": "RandomDisplacement"}, {"lineNumber": 658, "col_offset": 24, "nodeName": "accept_test", "type": "Any"}, {"lineNumber": 661, "col_offset": 42, "nodeName": "rng", "type": "Any"}, {"lineNumber": 662, "col_offset": 4, "nodeName": "accept_tests", "type": "List[Metropolis]"}, {"lineNumber": 665, "col_offset": 24, "nodeName": "niter", "type": "int"}, {"lineNumber": 668, "col_offset": 47, "nodeName": "disp", "type": "bool"}, {"lineNumber": 675, "col_offset": 25, "nodeName": "one_cycle", "type": "Callable[[], Any]"}, {"lineNumber": 677, "col_offset": 11, "nodeName": "callable", "type": "Callable[[Any], bool]"}, {"lineNumber": 677, "col_offset": 20, "nodeName": "callback", "type": "None"}, {"lineNumber": 679, "col_offset": 12, "nodeName": "val", "type": "Any"}, {"lineNumber": 688, "col_offset": 12, "nodeName": "count", "type": "int"}, {"lineNumber": 695, "col_offset": 37, "nodeName": "storage", "type": "Storage"}, {"lineNumber": 696, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 696, "col_offset": 20, "nodeName": "lowest_optimization_result", "type": "Any"}, {"lineNumber": 697, "col_offset": 14, "nodeName": "res", "type": "Any"}, {"lineNumber": 712, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 713, "col_offset": 63, "nodeName": "x", "type": "Any"}, {"lineNumber": 714, "col_offset": 63, "nodeName": "x", "type": "Any"}, {"lineNumber": 722, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 723, "col_offset": 4, "nodeName": "optimize", "type": "module"}, {"lineNumber": 723, "col_offset": 55, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 724, "col_offset": 65, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 731, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 732, "col_offset": 58, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "self", "type": "Storage"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "Storage"}, {"lineNumber": 22, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 22, "col_offset": 32, "nodeName": "minres", "type": "Any"}, {"lineNumber": 25, "col_offset": 11, "nodeName": "minres", "type": "Any"}, {"lineNumber": 25, "col_offset": 24, "nodeName": "minres", "type": "Any"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "_add", "type": "Callable[[Any], Any]"}, {"lineNumber": 26, "col_offset": 22, "nodeName": "minres", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 68, "col_offset": 19, "nodeName": "optimize", "type": "module"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 72, "col_offset": 27, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "minres", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 77, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 25, "nodeName": "minres", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 86, "col_offset": 28, "nodeName": "minres", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "minres", "type": "Any"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 90, "col_offset": 28, "nodeName": "minres", "type": "Any"}, {"lineNumber": 100, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 100, "col_offset": 31, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "minres", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 113, "col_offset": 29, "nodeName": "minres", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 115, "col_offset": 29, "nodeName": "minres", "type": "Any"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 117, "col_offset": 29, "nodeName": "minres", "type": "Any"}, {"lineNumber": 126, "col_offset": 22, "nodeName": "test", "type": "Metropolis"}, {"lineNumber": 128, "col_offset": 15, "nodeName": "testres", "type": "bool"}, {"lineNumber": 129, "col_offset": 16, "nodeName": "accept", "type": "bool"}, {"lineNumber": 139, "col_offset": 19, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "report", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 36, "nodeName": "accept", "type": "bool"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 155, "col_offset": 26, "nodeName": "minres", "type": "Any"}, {"lineNumber": 156, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 156, "col_offset": 21, "nodeName": "copy", "type": "Any"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "x", "type": "Any"}, {"lineNumber": 157, "col_offset": 29, "nodeName": "update", "type": "Callable[[Any], Any]"}, {"lineNumber": 157, "col_offset": 49, "nodeName": "minres", "type": "Any"}, {"lineNumber": 161, "col_offset": 12, "nodeName": "print_report", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 161, "col_offset": 30, "nodeName": "fun", "type": "Any"}, {"lineNumber": 161, "col_offset": 42, "nodeName": "accept", "type": "bool"}, {"lineNumber": 175, "col_offset": 17, "nodeName": "storage", "type": "Storage"}, {"lineNumber": 217, "col_offset": 15, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 220, "col_offset": 23, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 221, "col_offset": 22, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 221, "col_offset": 28, "nodeName": "naccept", "type": "int"}, {"lineNumber": 221, "col_offset": 44, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 222, "col_offset": 25, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "takestep", "type": "Any"}, {"lineNumber": 225, "col_offset": 38, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "takestep", "type": "Any"}, {"lineNumber": 228, "col_offset": 38, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 230, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 238, "col_offset": 11, "nodeName": "nstep", "type": "int"}, {"lineNumber": 238, "col_offset": 24, "nodeName": "interval", "type": "Any"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "_adjust_step_size", "type": "Callable[[], Any]"}, {"lineNumber": 240, "col_offset": 15, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 245, "col_offset": 12, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 266, "col_offset": 13, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 266, "col_offset": 38, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 266, "col_offset": 53, "nodeName": "self", "type": "RandomDisplacement"}, {"lineNumber": 267, "col_offset": 37, "nodeName": "shape", "type": "Any"}, {"lineNumber": 267, "col_offset": 46, "nodeName": "x", "type": "Any"}, {"lineNumber": 281, "col_offset": 11, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 282, "col_offset": 19, "nodeName": "minimizer", "type": "Callable[..., Any]"}, {"lineNumber": 282, "col_offset": 34, "nodeName": "x0", "type": "Any"}, {"lineNumber": 284, "col_offset": 19, "nodeName": "minimizer", "type": "Callable[..., Any]"}, {"lineNumber": 284, "col_offset": 34, "nodeName": "func", "type": "Callable[[Any], Any]"}, {"lineNumber": 284, "col_offset": 45, "nodeName": "x0", "type": "Any"}, {"lineNumber": 302, "col_offset": 31, "nodeName": "T", "type": "float"}, {"lineNumber": 302, "col_offset": 26, "nodeName": "T", "type": "float"}, {"lineNumber": 302, "col_offset": 43, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "math", "type": "module"}, {"lineNumber": 311, "col_offset": 21, "nodeName": "min", "type": "Callable"}, {"lineNumber": 312, "col_offset": 15, "nodeName": "random_gen", "type": "Any"}, {"lineNumber": 319, "col_offset": 20, "nodeName": "accept_reject", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 633, "col_offset": 41, "nodeName": "scipy", "type": "module"}, {"lineNumber": 638, "col_offset": 15, "nodeName": "callable", "type": "Callable[[Any], bool]"}, {"lineNumber": 638, "col_offset": 24, "nodeName": "take_step", "type": "Any"}, {"lineNumber": 639, "col_offset": 18, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 643, "col_offset": 32, "nodeName": "AdaptiveStepsize", "type": "Type[AdaptiveStepsize]"}, {"lineNumber": 643, "col_offset": 49, "nodeName": "take_step", "type": "Any"}, {"lineNumber": 649, "col_offset": 47, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 649, "col_offset": 68, "nodeName": "rng", "type": "Any"}, {"lineNumber": 650, "col_offset": 64, "nodeName": "interval", "type": "int"}, {"lineNumber": 651, "col_offset": 53, "nodeName": "disp", "type": "bool"}, {"lineNumber": 656, "col_offset": 15, "nodeName": "callable", "type": "Callable[[Any], bool]"}, {"lineNumber": 656, "col_offset": 24, "nodeName": "accept_test", "type": "Any"}, {"lineNumber": 657, "col_offset": 18, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 675, "col_offset": 25, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 679, "col_offset": 18, "nodeName": "callback", "type": "Any"}, {"lineNumber": 679, "col_offset": 27, "nodeName": "xtrial", "type": "Any"}, {"lineNumber": 679, "col_offset": 38, "nodeName": "energy_trial", "type": "Any"}, {"lineNumber": 679, "col_offset": 55, "nodeName": "accept", "type": "bool"}, {"lineNumber": 680, "col_offset": 15, "nodeName": "val", "type": "Any"}, {"lineNumber": 681, "col_offset": 19, "nodeName": "val", "type": "Any"}, {"lineNumber": 689, "col_offset": 13, "nodeName": "count", "type": "int"}, {"lineNumber": 689, "col_offset": 21, "nodeName": "niter_success", "type": "int"}, {"lineNumber": 690, "col_offset": 12, "nodeName": "message", "type": "List[str]"}, {"lineNumber": 695, "col_offset": 37, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 696, "col_offset": 20, "nodeName": "res", "type": "Any"}, {"lineNumber": 723, "col_offset": 4, "nodeName": "scipy", "type": "module"}, {"lineNumber": 25, "col_offset": 24, "nodeName": "self", "type": "Storage"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "self", "type": "Storage"}, {"lineNumber": 68, "col_offset": 19, "nodeName": "scipy", "type": "module"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 126, "col_offset": 33, "nodeName": "energy_after_quench", "type": "Any"}, {"lineNumber": 126, "col_offset": 60, "nodeName": "x_after_quench", "type": "Any"}, {"lineNumber": 127, "col_offset": 33, "nodeName": "energy", "type": "Any"}, {"lineNumber": 127, "col_offset": 52, "nodeName": "x", "type": "Any"}, {"lineNumber": 131, "col_offset": 17, "nodeName": "testres", "type": "bool"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "step_taking", "type": "AdaptiveStepsize"}, {"lineNumber": 140, "col_offset": 50, "nodeName": "energy_after_quench", "type": "Any"}, {"lineNumber": 141, "col_offset": 42, "nodeName": "x_after_quench", "type": "Any"}, {"lineNumber": 141, "col_offset": 64, "nodeName": "energy", "type": "Any"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "x", "type": "Any"}, {"lineNumber": 156, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "minres", "type": "Any"}, {"lineNumber": 157, "col_offset": 29, "nodeName": "storage", "type": "Storage"}, {"lineNumber": 161, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 161, "col_offset": 30, "nodeName": "minres", "type": "Any"}, {"lineNumber": 163, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 175, "col_offset": 17, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 177, "col_offset": 32, "nodeName": "nstep", "type": "int"}, {"lineNumber": 177, "col_offset": 44, "nodeName": "energy", "type": "Any"}, {"lineNumber": 177, "col_offset": 57, "nodeName": "energy_trial", "type": "Any"}, {"lineNumber": 178, "col_offset": 32, "nodeName": "accept", "type": "bool"}, {"lineNumber": 178, "col_offset": 40, "nodeName": "fun", "type": "Any"}, {"lineNumber": 221, "col_offset": 28, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 238, "col_offset": 11, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 238, "col_offset": 24, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 266, "col_offset": 13, "nodeName": "self", "type": "RandomDisplacement"}, {"lineNumber": 266, "col_offset": 38, "nodeName": "self", "type": "RandomDisplacement"}, {"lineNumber": 267, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 282, "col_offset": 19, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 282, "col_offset": 40, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 284, "col_offset": 19, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 284, "col_offset": 34, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 284, "col_offset": 51, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 311, "col_offset": 62, "nodeName": "beta", "type": "Union[Any, float]"}, {"lineNumber": 312, "col_offset": 15, "nodeName": "self", "type": "Metropolis"}, {"lineNumber": 319, "col_offset": 20, "nodeName": "self", "type": "Metropolis"}, {"lineNumber": 319, "col_offset": 39, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 320, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 643, "col_offset": 69, "nodeName": "interval", "type": "Any"}, {"lineNumber": 644, "col_offset": 57, "nodeName": "disp", "type": "Any"}, {"lineNumber": 679, "col_offset": 27, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 679, "col_offset": 38, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 679, "col_offset": 55, "nodeName": "bh", "type": "BasinHoppingRunner"}, {"lineNumber": 682, "col_offset": 20, "nodeName": "message", "type": "List[str]"}, {"lineNumber": 711, "col_offset": 38, "nodeName": "x", "type": "Any"}, {"lineNumber": 711, "col_offset": 45, "nodeName": "x", "type": "Any"}, {"lineNumber": 80, "col_offset": 50, "nodeName": "nstep", "type": "int"}, {"lineNumber": 80, "col_offset": 62, "nodeName": "energy", "type": "Any"}, {"lineNumber": 127, "col_offset": 33, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 127, "col_offset": 52, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 132, "col_offset": 22, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 134, "col_offset": 21, "nodeName": "testres", "type": "bool"}, {"lineNumber": 135, "col_offset": 16, "nodeName": "accept", "type": "bool"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 141, "col_offset": 64, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 157, "col_offset": 29, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 177, "col_offset": 32, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 177, "col_offset": 44, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 178, "col_offset": 40, "nodeName": "minres", "type": "Any"}, {"lineNumber": 231, "col_offset": 51, "nodeName": "accept_rate", "type": "float"}, {"lineNumber": 232, "col_offset": 18, "nodeName": "target_accept_rate", "type": "Any"}, {"lineNumber": 232, "col_offset": 43, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 233, "col_offset": 18, "nodeName": "old_stepsize", "type": "Any"}, {"lineNumber": 282, "col_offset": 40, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 284, "col_offset": 51, "nodeName": "self", "type": "MinimizerWrapper"}, {"lineNumber": 311, "col_offset": 62, "nodeName": "self", "type": "Metropolis"}, {"lineNumber": 711, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 713, "col_offset": 20, "nodeName": "sin", "type": "Any"}, {"lineNumber": 713, "col_offset": 50, "nodeName": "x", "type": "Any"}, {"lineNumber": 714, "col_offset": 20, "nodeName": "sin", "type": "Any"}, {"lineNumber": 714, "col_offset": 50, "nodeName": "x", "type": "Any"}, {"lineNumber": 80, "col_offset": 50, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 80, "col_offset": 62, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 164, "col_offset": 37, "nodeName": "nstep", "type": "int"}, {"lineNumber": 164, "col_offset": 49, "nodeName": "energy", "type": "Any"}, {"lineNumber": 232, "col_offset": 18, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 232, "col_offset": 43, "nodeName": "takestep", "type": "Any"}, {"lineNumber": 311, "col_offset": 29, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 711, "col_offset": 17, "nodeName": "x", "type": "Any"}, {"lineNumber": 164, "col_offset": 37, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 164, "col_offset": 49, "nodeName": "self", "type": "BasinHoppingRunner"}, {"lineNumber": 232, "col_offset": 43, "nodeName": "self", "type": "AdaptiveStepsize"}, {"lineNumber": 311, "col_offset": 35, "nodeName": "energy_new", "type": "Any"}, {"lineNumber": 311, "col_offset": 48, "nodeName": "energy_old", "type": "Any"}, {"lineNumber": 713, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 714, "col_offset": 31, "nodeName": "x", "type": "Any"}]