[{"lineNumber": 18, "col_offset": 0, "nodeName": "func1d", "type": "Callable[[Any], Any]"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 0, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 37, "col_offset": 0, "nodeName": "func2d_easyderiv", "type": "Callable[[Any], Any]"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "myTakeStep2", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 18, "nodeName": "RandomDisplacement", "type": "Type[scipy.optimize._basinhopping.RandomDisplacement]"}, {"lineNumber": 67, "col_offset": 19, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 88, "col_offset": 17, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 106, "col_offset": 23, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 331, "col_offset": 19, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 365, "col_offset": 30, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 382, "col_offset": 22, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 424, "col_offset": 28, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "df", "type": "numpy.ndarray"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 26, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "f", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "s", "type": "float"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "x", "type": "Any"}, {"lineNumber": 64, "col_offset": 11, "nodeName": "x", "type": "Any"}, {"lineNumber": 20, "col_offset": 9, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "df", "type": "numpy.ndarray"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 34, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 34, "col_offset": 14, "nodeName": "df", "type": "Any"}, {"lineNumber": 39, "col_offset": 9, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "f", "type": "Any"}, {"lineNumber": 43, "col_offset": 14, "nodeName": "df", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 63, "col_offset": 31, "nodeName": "s", "type": "float"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "tol", "type": "int"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "niter", "type": "int"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "disp", "type": "bool"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "kwargs_nograd", "type": "Dict[str, str]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str], Dict[str, Union[Dict[Any, Any], str]]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str]]"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "methods", "type": "List[str]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 195, "col_offset": 12, "nodeName": "method", "type": "str"}, {"lineNumber": 195, "col_offset": 22, "nodeName": "methods", "type": "List[str]"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "methods", "type": "List[str]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Dict[str, str]"}, {"lineNumber": 209, "col_offset": 12, "nodeName": "method", "type": "str"}, {"lineNumber": 209, "col_offset": 22, "nodeName": "methods", "type": "List[str]"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "takestep", "type": "MyTakeStep1"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "initial_step_size", "type": "Any"}, {"lineNumber": 223, "col_offset": 28, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "takestep", "type": "Callable[[Any], Any]"}, {"lineNumber": 235, "col_offset": 19, "nodeName": "myTakeStep2", "type": "Callable[[Any], Any]"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "accept_test", "type": "MyAcceptTest"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "callback", "type": "MyCallBack"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "niter", "type": "int"}, {"lineNumber": 272, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "f_1", "type": "List[Any]"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "f_2", "type": "List[Any]"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "rng", "type": "Any"}, {"lineNumber": 311, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 313, "col_offset": 8, "nodeName": "res1", "type": "Any"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "rng", "type": "Any"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "res2", "type": "Any"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 326, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "f0", "type": "int"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "x", "type": "numpy.ndarray"}, {"lineNumber": 337, "col_offset": 19, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "fun", "type": "int"}, {"lineNumber": 338, "col_offset": 21, "nodeName": "f0", "type": "int"}, {"lineNumber": 340, "col_offset": 8, "nodeName": "storage", "type": "scipy.optimize._basinhopping.Storage"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "fun", "type": "int"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "ret", "type": "bool"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 354, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 355, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "fun", "type": "int"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "ret", "type": "bool"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "displace", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "N", "type": "int"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "x0", "type": "Any"}, {"lineNumber": 376, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 377, "col_offset": 8, "nodeName": "v", "type": "float"}, {"lineNumber": 384, "col_offset": 8, "nodeName": "T", "type": "float"}, {"lineNumber": 385, "col_offset": 8, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 390, "col_offset": 8, "nodeName": "ret", "type": "bool"}, {"lineNumber": 403, "col_offset": 8, "nodeName": "one_accept", "type": "bool"}, {"lineNumber": 404, "col_offset": 8, "nodeName": "one_reject", "type": "bool"}, {"lineNumber": 405, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 419, "col_offset": 8, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 426, "col_offset": 8, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 427, "col_offset": 8, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 428, "col_offset": 8, "nodeName": "target_accept_rate", "type": "float"}, {"lineNumber": 434, "col_offset": 8, "nodeName": "x", "type": "float"}, {"lineNumber": 437, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 444, "col_offset": 8, "nodeName": "x", "type": "float"}, {"lineNumber": 447, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 454, "col_offset": 8, "nodeName": "x", "type": "float"}, {"lineNumber": 455, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 462, "col_offset": 8, "nodeName": "x", "type": "float"}, {"lineNumber": 463, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "cos", "type": "Any"}, {"lineNumber": 19, "col_offset": 42, "nodeName": "x", "type": "Any"}, {"lineNumber": 20, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 39, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "MyTakeStep1"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "MyTakeStep1"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "__call__", "type": "Callable[[Any], Any]"}, {"lineNumber": 55, "col_offset": 49, "nodeName": "x", "type": "Any"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "random", "type": "Any"}, {"lineNumber": 63, "col_offset": 28, "nodeName": "s", "type": "float"}, {"lineNumber": 63, "col_offset": 34, "nodeName": "shape", "type": "Any"}, {"lineNumber": 63, "col_offset": 43, "nodeName": "x", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "MyCallBack"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "MyCallBack"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "MyCallBack"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "self", "type": "MyCallBack"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "seed", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 131, "col_offset": 22, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 131, "col_offset": 33, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 131, "col_offset": 47, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 134, "col_offset": 33, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 134, "col_offset": 47, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 140, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 27, "nodeName": "func1d", "type": "Callable[[Any], Any]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 142, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 142, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 147, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 147, "col_offset": 27, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 149, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 155, "col_offset": 27, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str], Dict[str, Union[Dict[Any, Any], str]]]"}, {"lineNumber": 158, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 158, "col_offset": 27, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 162, "col_offset": 21, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 162, "col_offset": 31, "nodeName": "njev", "type": "Any"}, {"lineNumber": 166, "col_offset": 27, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str]]"}, {"lineNumber": 170, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 170, "col_offset": 27, "nodeName": "func2d_easyderiv", "type": "Callable[[Any], Any]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 177, "col_offset": 11, "nodeName": "jacobian", "type": "Any"}, {"lineNumber": 177, "col_offset": 22, "nodeName": "func2d_easyderiv", "type": "Callable[[Any], Any]"}, {"lineNumber": 177, "col_offset": 39, "nodeName": "x", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 178, "col_offset": 28, "nodeName": "jac", "type": "Any"}, {"lineNumber": 178, "col_offset": 64, "nodeName": "jacobian", "type": "Any"}, {"lineNumber": 179, "col_offset": 28, "nodeName": "tol", "type": "int"}, {"lineNumber": 184, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 184, "col_offset": 27, "nodeName": "func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 187, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 187, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 194, "col_offset": 37, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 196, "col_offset": 41, "nodeName": "method", "type": "str"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 208, "col_offset": 37, "nodeName": "kwargs_nograd", "type": "Dict[str, str]"}, {"lineNumber": 210, "col_offset": 41, "nodeName": "method", "type": "str"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 214, "col_offset": 12, "nodeName": "tol", "type": "int"}, {"lineNumber": 214, "col_offset": 18, "nodeName": "tol", "type": "int"}, {"lineNumber": 222, "col_offset": 19, "nodeName": "MyTakeStep1", "type": "Type[MyTakeStep1]"}, {"lineNumber": 223, "col_offset": 28, "nodeName": "takestep", "type": "MyTakeStep1"}, {"lineNumber": 225, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 225, "col_offset": 27, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 228, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 228, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 237, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 237, "col_offset": 27, "nodeName": "func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 241, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 241, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 247, "col_offset": 22, "nodeName": "MyAcceptTest", "type": "Type[MyAcceptTest]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 250, "col_offset": 21, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 252, "col_offset": 16, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 258, "col_offset": 19, "nodeName": "MyCallBack", "type": "Type[MyCallBack]"}, {"lineNumber": 261, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 261, "col_offset": 27, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "been_called", "type": "bool"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 265, "col_offset": 21, "nodeName": "nit", "type": "Any"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 270, "col_offset": 33, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 272, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 272, "col_offset": 27, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 276, "col_offset": 34, "nodeName": "minimization_failures", "type": "Any"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 281, "col_offset": 21, "nodeName": "func1d", "type": "Callable[[Any], Any]"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 293, "col_offset": 21, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 301, "col_offset": 21, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 309, "col_offset": 14, "nodeName": "default_rng", "type": "Any"}, {"lineNumber": 313, "col_offset": 15, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 313, "col_offset": 28, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 317, "col_offset": 14, "nodeName": "default_rng", "type": "Any"}, {"lineNumber": 318, "col_offset": 15, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 318, "col_offset": 28, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 321, "col_offset": 21, "nodeName": "x", "type": "Any"}, {"lineNumber": 321, "col_offset": 29, "nodeName": "x", "type": "Any"}, {"lineNumber": 326, "col_offset": 14, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 326, "col_offset": 27, "nodeName": "func1d", "type": "Callable[[Any], Any]"}, {"lineNumber": 328, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 328, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 328, "col_offset": 48, "nodeName": "tol", "type": "int"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 333, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 336, "col_offset": 17, "nodeName": "OptimizeResult", "type": "Any"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 337, "col_offset": 19, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "minres", "type": "Any"}, {"lineNumber": 338, "col_offset": 21, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 340, "col_offset": 8, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 340, "col_offset": 23, "nodeName": "Storage", "type": "Type[scipy.optimize._basinhopping.Storage]"}, {"lineNumber": 340, "col_offset": 31, "nodeName": "minres", "type": "Any"}, {"lineNumber": 343, "col_offset": 21, "nodeName": "OptimizeResult", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 344, "col_offset": 23, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 345, "col_offset": 25, "nodeName": "f0", "type": "int"}, {"lineNumber": 347, "col_offset": 14, "nodeName": "update", "type": "Callable[[Any], bool]"}, {"lineNumber": 347, "col_offset": 34, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "get_lowest", "type": "Callable[[], Any]"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 349, "col_offset": 21, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 349, "col_offset": 30, "nodeName": "x", "type": "Any"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 350, "col_offset": 21, "nodeName": "f0", "type": "int"}, {"lineNumber": 350, "col_offset": 30, "nodeName": "fun", "type": "Any"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 354, "col_offset": 21, "nodeName": "OptimizeResult", "type": "Any"}, {"lineNumber": 355, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 355, "col_offset": 23, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 356, "col_offset": 25, "nodeName": "f0", "type": "int"}, {"lineNumber": 358, "col_offset": 14, "nodeName": "update", "type": "Callable[[Any], bool]"}, {"lineNumber": 358, "col_offset": 34, "nodeName": "new_minres", "type": "Any"}, {"lineNumber": 359, "col_offset": 17, "nodeName": "get_lowest", "type": "Callable[[], Any]"}, {"lineNumber": 360, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 361, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 362, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 362, "col_offset": 16, "nodeName": "ret", "type": "bool"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 368, "col_offset": 24, "nodeName": "RandomDisplacement", "type": "Type[scipy.optimize._basinhopping.RandomDisplacement]"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 370, "col_offset": 18, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 376, "col_offset": 12, "nodeName": "displace", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 376, "col_offset": 26, "nodeName": "x0", "type": "Any"}, {"lineNumber": 378, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 379, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 379, "col_offset": 39, "nodeName": "v", "type": "float"}, {"lineNumber": 384, "col_offset": 8, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 385, "col_offset": 8, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 385, "col_offset": 19, "nodeName": "Metropolis", "type": "Type[scipy.optimize._basinhopping.Metropolis]"}, {"lineNumber": 385, "col_offset": 30, "nodeName": "T", "type": "float"}, {"lineNumber": 390, "col_offset": 14, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 391, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 391, "col_offset": 26, "nodeName": "ret", "type": "bool"}, {"lineNumber": 391, "col_offset": 31, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 394, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 398, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 398, "col_offset": 22, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 398, "col_offset": 32, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 399, "col_offset": 8, "nodeName": "assert_raises", "type": "Any"}, {"lineNumber": 399, "col_offset": 22, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 399, "col_offset": 32, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 405, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 408, "col_offset": 12, "nodeName": "ret", "type": "bool"}, {"lineNumber": 409, "col_offset": 15, "nodeName": "ret", "type": "bool"}, {"lineNumber": 413, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 413, "col_offset": 16, "nodeName": "one_accept", "type": "bool"}, {"lineNumber": 414, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 414, "col_offset": 16, "nodeName": "one_reject", "type": "bool"}, {"lineNumber": 419, "col_offset": 14, "nodeName": "Metropolis", "type": "Type[scipy.optimize._basinhopping.Metropolis]"}, {"lineNumber": 426, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 427, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 427, "col_offset": 18, "nodeName": "RandomDisplacement", "type": "Type[scipy.optimize._basinhopping.RandomDisplacement]"}, {"lineNumber": 428, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 429, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 429, "col_offset": 24, "nodeName": "AdaptiveStepsize", "type": "Type[scipy.optimize._basinhopping.AdaptiveStepsize]"}, {"lineNumber": 435, "col_offset": 8, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 435, "col_offset": 22, "nodeName": "x", "type": "float"}, {"lineNumber": 436, "col_offset": 8, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 437, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 437, "col_offset": 23, "nodeName": "interval", "type": "Any"}, {"lineNumber": 440, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 445, "col_offset": 8, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 445, "col_offset": 22, "nodeName": "x", "type": "float"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 447, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 447, "col_offset": 23, "nodeName": "interval", "type": "Any"}, {"lineNumber": 450, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 455, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 458, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 463, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 466, "col_offset": 8, "nodeName": "assert_", "type": "Any"}, {"lineNumber": 19, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "cos", "type": "Any"}, {"lineNumber": 25, "col_offset": 70, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "cos", "type": "Any"}, {"lineNumber": 30, "col_offset": 70, "nodeName": "x", "type": "Any"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 56, "nodeName": "x", "type": "Any"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "x", "type": "Any"}, {"lineNumber": 41, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 63, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 76, "col_offset": 53, "nodeName": "bool_", "type": "Any"}, {"lineNumber": 77, "col_offset": 24, "nodeName": "bool_", "type": "Any"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 82, "col_offset": 29, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 82, "col_offset": 33, "nodeName": "testres", "type": "List[Any]"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "testres", "type": "List[Any]"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "self", "type": "MyCallBack"}, {"lineNumber": 114, "col_offset": 28, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 131, "col_offset": 55, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 134, "col_offset": 55, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 140, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 140, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 141, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 141, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 142, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 142, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 142, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 147, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 147, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 148, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 149, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 149, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 150, "col_offset": 16, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 155, "col_offset": 27, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 158, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 159, "col_offset": 44, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str], Dict[str, Union[Dict[Any, Any], str]]]"}, {"lineNumber": 159, "col_offset": 68, "nodeName": "niter", "type": "int"}, {"lineNumber": 160, "col_offset": 32, "nodeName": "disp", "type": "bool"}, {"lineNumber": 161, "col_offset": 16, "nodeName": "nfev", "type": "Any"}, {"lineNumber": 162, "col_offset": 21, "nodeName": "res", "type": "Any"}, {"lineNumber": 162, "col_offset": 31, "nodeName": "res", "type": "Any"}, {"lineNumber": 166, "col_offset": 27, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 171, "col_offset": 44, "nodeName": "minimizer_kwargs", "type": "Union[Dict[str, Union[bool, str]], Dict[str, str]]"}, {"lineNumber": 171, "col_offset": 68, "nodeName": "niter", "type": "int"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "disp", "type": "bool"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 174, "col_offset": 24, "nodeName": "lowest_optimization_result", "type": "Any"}, {"lineNumber": 177, "col_offset": 39, "nodeName": "res", "type": "Any"}, {"lineNumber": 178, "col_offset": 28, "nodeName": "lowest_optimization_result", "type": "Any"}, {"lineNumber": 179, "col_offset": 28, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 184, "col_offset": 42, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 185, "col_offset": 44, "nodeName": "kwargs_nograd", "type": "Dict[str, str]"}, {"lineNumber": 186, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 186, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 187, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 187, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 187, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "copy", "type": "module"}, {"lineNumber": 194, "col_offset": 37, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 196, "col_offset": 12, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 197, "col_offset": 18, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 197, "col_offset": 31, "nodeName": "func2d", "type": "Callable[[Any], Any]"}, {"lineNumber": 200, "col_offset": 12, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 200, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 200, "col_offset": 52, "nodeName": "tol", "type": "int"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "copy", "type": "module"}, {"lineNumber": 208, "col_offset": 37, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 210, "col_offset": 12, "nodeName": "minimizer_kwargs", "type": "Dict[str, str]"}, {"lineNumber": 211, "col_offset": 18, "nodeName": "basinhopping", "type": "Callable[..., Any]"}, {"lineNumber": 211, "col_offset": 31, "nodeName": "func2d_nograd", "type": "Callable[[Any], Any]"}, {"lineNumber": 214, "col_offset": 18, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 215, "col_offset": 15, "nodeName": "method", "type": "str"}, {"lineNumber": 216, "col_offset": 16, "nodeName": "tol", "type": "int"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 217, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 225, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 225, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 226, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 226, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 227, "col_offset": 37, "nodeName": "takestep", "type": "MyTakeStep1"}, {"lineNumber": 228, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 228, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 228, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "takestep", "type": "MyTakeStep1"}, {"lineNumber": 231, "col_offset": 16, "nodeName": "initial_step_size", "type": "Any"}, {"lineNumber": 231, "col_offset": 37, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 237, "col_offset": 42, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 238, "col_offset": 44, "nodeName": "kwargs_nograd", "type": "Dict[str, str]"}, {"lineNumber": 239, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 239, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 240, "col_offset": 37, "nodeName": "takestep", "type": "Callable[[Any], Any]"}, {"lineNumber": 241, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 241, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 241, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 250, "col_offset": 29, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 250, "col_offset": 58, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 251, "col_offset": 36, "nodeName": "disp", "type": "bool"}, {"lineNumber": 251, "col_offset": 59, "nodeName": "accept_test", "type": "MyAcceptTest"}, {"lineNumber": 252, "col_offset": 16, "nodeName": "accept_test", "type": "MyAcceptTest"}, {"lineNumber": 261, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 261, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 262, "col_offset": 42, "nodeName": "disp", "type": "bool"}, {"lineNumber": 262, "col_offset": 62, "nodeName": "callback", "type": "MyCallBack"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "callback", "type": "MyCallBack"}, {"lineNumber": 265, "col_offset": 21, "nodeName": "res", "type": "Any"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 272, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 272, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 273, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 273, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 276, "col_offset": 21, "nodeName": "nit", "type": "Any"}, {"lineNumber": 276, "col_offset": 34, "nodeName": "res", "type": "Any"}, {"lineNumber": 281, "col_offset": 29, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 281, "col_offset": 58, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 282, "col_offset": 35, "nodeName": "disp", "type": "bool"}, {"lineNumber": 291, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 291, "col_offset": 23, "nodeName": "f", "type": "Any"}, {"lineNumber": 293, "col_offset": 58, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 294, "col_offset": 40, "nodeName": "callback", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 299, "col_offset": 23, "nodeName": "f", "type": "Any"}, {"lineNumber": 301, "col_offset": 58, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 302, "col_offset": 40, "nodeName": "callback2", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 303, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 303, "col_offset": 30, "nodeName": "f_1", "type": "List[Any]"}, {"lineNumber": 303, "col_offset": 36, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 303, "col_offset": 45, "nodeName": "f_2", "type": "List[Any]"}, {"lineNumber": 309, "col_offset": 14, "nodeName": "random", "type": "Any"}, {"lineNumber": 314, "col_offset": 45, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 315, "col_offset": 43, "nodeName": "rng", "type": "Any"}, {"lineNumber": 317, "col_offset": 14, "nodeName": "random", "type": "Any"}, {"lineNumber": 319, "col_offset": 45, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 320, "col_offset": 43, "nodeName": "rng", "type": "Any"}, {"lineNumber": 321, "col_offset": 21, "nodeName": "res1", "type": "Any"}, {"lineNumber": 321, "col_offset": 29, "nodeName": "res2", "type": "Any"}, {"lineNumber": 326, "col_offset": 35, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 326, "col_offset": 64, "nodeName": "kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 327, "col_offset": 33, "nodeName": "niter", "type": "int"}, {"lineNumber": 327, "col_offset": 50, "nodeName": "disp", "type": "bool"}, {"lineNumber": 328, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 328, "col_offset": 35, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 328, "col_offset": 48, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 333, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 344, "col_offset": 23, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 345, "col_offset": 25, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 347, "col_offset": 14, "nodeName": "storage", "type": "scipy.optimize._basinhopping.Storage"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "storage", "type": "scipy.optimize._basinhopping.Storage"}, {"lineNumber": 349, "col_offset": 21, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 349, "col_offset": 30, "nodeName": "minres", "type": "Any"}, {"lineNumber": 350, "col_offset": 21, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 350, "col_offset": 30, "nodeName": "minres", "type": "Any"}, {"lineNumber": 351, "col_offset": 20, "nodeName": "ret", "type": "bool"}, {"lineNumber": 355, "col_offset": 23, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 356, "col_offset": 25, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 358, "col_offset": 14, "nodeName": "storage", "type": "scipy.optimize._basinhopping.Storage"}, {"lineNumber": 359, "col_offset": 17, "nodeName": "storage", "type": "scipy.optimize._basinhopping.Storage"}, {"lineNumber": 360, "col_offset": 16, "nodeName": "x0", "type": "numpy.ndarray"}, {"lineNumber": 360, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 361, "col_offset": 16, "nodeName": "f0", "type": "int"}, {"lineNumber": 361, "col_offset": 27, "nodeName": "fun", "type": "Any"}, {"lineNumber": 368, "col_offset": 52, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 370, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 370, "col_offset": 28, "nodeName": "N", "type": "int"}, {"lineNumber": 376, "col_offset": 12, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 376, "col_offset": 26, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 378, "col_offset": 28, "nodeName": "mean", "type": "Any"}, {"lineNumber": 378, "col_offset": 36, "nodeName": "x", "type": "Any"}, {"lineNumber": 379, "col_offset": 28, "nodeName": "var", "type": "Any"}, {"lineNumber": 379, "col_offset": 35, "nodeName": "x", "type": "Any"}, {"lineNumber": 385, "col_offset": 30, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 390, "col_offset": 14, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 394, "col_offset": 16, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 398, "col_offset": 32, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 399, "col_offset": 32, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 406, "col_offset": 15, "nodeName": "one_accept", "type": "bool"}, {"lineNumber": 408, "col_offset": 18, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 410, "col_offset": 16, "nodeName": "one_accept", "type": "bool"}, {"lineNumber": 412, "col_offset": 16, "nodeName": "one_reject", "type": "bool"}, {"lineNumber": 420, "col_offset": 13, "nodeName": "errstate", "type": "Any"}, {"lineNumber": 421, "col_offset": 12, "nodeName": "accept_reject", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 427, "col_offset": 46, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 429, "col_offset": 50, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 430, "col_offset": 53, "nodeName": "target_accept_rate", "type": "float"}, {"lineNumber": 435, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 436, "col_offset": 8, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 437, "col_offset": 23, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 438, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 438, "col_offset": 26, "nodeName": "x", "type": "float"}, {"lineNumber": 439, "col_offset": 12, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 440, "col_offset": 16, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 440, "col_offset": 35, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 445, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 447, "col_offset": 23, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 448, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 448, "col_offset": 26, "nodeName": "x", "type": "float"}, {"lineNumber": 449, "col_offset": 12, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 450, "col_offset": 16, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 450, "col_offset": 35, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 455, "col_offset": 23, "nodeName": "interval", "type": "Any"}, {"lineNumber": 456, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 456, "col_offset": 26, "nodeName": "x", "type": "float"}, {"lineNumber": 457, "col_offset": 12, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 458, "col_offset": 16, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 458, "col_offset": 35, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 463, "col_offset": 23, "nodeName": "interval", "type": "Any"}, {"lineNumber": 464, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 464, "col_offset": 26, "nodeName": "x", "type": "float"}, {"lineNumber": 465, "col_offset": 12, "nodeName": "report", "type": "Callable[..., None]"}, {"lineNumber": 466, "col_offset": 16, "nodeName": "stepsize", "type": "Any"}, {"lineNumber": 466, "col_offset": 35, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 20, "col_offset": 53, "nodeName": "x", "type": "Any"}, {"lineNumber": 25, "col_offset": 48, "nodeName": "x", "type": "Any"}, {"lineNumber": 25, "col_offset": 56, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 48, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 56, "nodeName": "x", "type": "Any"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "sin", "type": "Any"}, {"lineNumber": 32, "col_offset": 50, "nodeName": "x", "type": "Any"}, {"lineNumber": 40, "col_offset": 16, "nodeName": "x", "type": "Any"}, {"lineNumber": 40, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 51, "col_offset": 14, "nodeName": "MyTakeStep1", "type": "Type[MyTakeStep1]"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "self", "type": "MyTakeStep1"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "MyTakeStep1", "type": "Type[MyTakeStep1]"}, {"lineNumber": 55, "col_offset": 34, "nodeName": "self", "type": "MyTakeStep1"}, {"lineNumber": 76, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 82, "col_offset": 33, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 114, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 131, "col_offset": 55, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 131, "col_offset": 63, "nodeName": "i", "type": "int"}, {"lineNumber": 134, "col_offset": 55, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 134, "col_offset": 63, "nodeName": "i", "type": "int"}, {"lineNumber": 140, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 140, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 140, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 141, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 141, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 142, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 142, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 147, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 147, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 147, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 148, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 149, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 149, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 150, "col_offset": 16, "nodeName": "res", "type": "Any"}, {"lineNumber": 155, "col_offset": 27, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 158, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 158, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 159, "col_offset": 68, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 160, "col_offset": 32, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 161, "col_offset": 16, "nodeName": "res", "type": "Any"}, {"lineNumber": 166, "col_offset": 27, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 171, "col_offset": 68, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 174, "col_offset": 24, "nodeName": "res", "type": "Any"}, {"lineNumber": 178, "col_offset": 28, "nodeName": "res", "type": "Any"}, {"lineNumber": 184, "col_offset": 42, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 184, "col_offset": 50, "nodeName": "i", "type": "int"}, {"lineNumber": 185, "col_offset": 44, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 186, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 186, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 187, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 187, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 197, "col_offset": 39, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 198, "col_offset": 48, "nodeName": "minimizer_kwargs", "type": "Dict[str, Union[bool, str, Dict[Any, Any]]]"}, {"lineNumber": 199, "col_offset": 37, "nodeName": "niter", "type": "int"}, {"lineNumber": 199, "col_offset": 54, "nodeName": "disp", "type": "bool"}, {"lineNumber": 200, "col_offset": 32, "nodeName": "res", "type": "Any"}, {"lineNumber": 200, "col_offset": 39, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 200, "col_offset": 52, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 211, "col_offset": 46, "nodeName": "x0", "type": "Tuple[float, List[float]]"}, {"lineNumber": 212, "col_offset": 48, "nodeName": "minimizer_kwargs", "type": "Dict[str, str]"}, {"lineNumber": 213, "col_offset": 37, "nodeName": "niter", "type": "int"}, {"lineNumber": 213, "col_offset": 54, "nodeName": "disp", "type": "bool"}, {"lineNumber": 217, "col_offset": 32, "nodeName": "res", "type": "Any"}, {"lineNumber": 217, "col_offset": 39, "nodeName": "sol", "type": "Tuple[float, numpy.ndarray]"}, {"lineNumber": 217, "col_offset": 60, "nodeName": "tol", "type": "int"}, {"lineNumber": 225, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 225, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 225, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 226, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 226, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 228, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 228, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 231, "col_offset": 37, "nodeName": "takestep", "type": "MyTakeStep1"}, {"lineNumber": 237, "col_offset": 42, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 237, "col_offset": 50, "nodeName": "i", "type": "int"}, {"lineNumber": 238, "col_offset": 44, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 239, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 239, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 241, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 241, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 250, "col_offset": 29, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 250, "col_offset": 37, "nodeName": "i", "type": "int"}, {"lineNumber": 250, "col_offset": 58, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 251, "col_offset": 36, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 261, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 261, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 261, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 262, "col_offset": 42, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 264, "col_offset": 30, "nodeName": "message", "type": "Any"}, {"lineNumber": 272, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 272, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 272, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 273, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 273, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 276, "col_offset": 21, "nodeName": "res", "type": "Any"}, {"lineNumber": 281, "col_offset": 29, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 281, "col_offset": 37, "nodeName": "i", "type": "int"}, {"lineNumber": 281, "col_offset": 58, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 282, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 291, "col_offset": 12, "nodeName": "f_1", "type": "List[Any]"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "f_2", "type": "List[Any]"}, {"lineNumber": 303, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 303, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 309, "col_offset": 14, "nodeName": "np", "type": "module"}, {"lineNumber": 317, "col_offset": 14, "nodeName": "np", "type": "module"}, {"lineNumber": 326, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 326, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 326, "col_offset": 64, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 327, "col_offset": 33, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 327, "col_offset": 50, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 328, "col_offset": 35, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 328, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 347, "col_offset": 14, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 358, "col_offset": 14, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 359, "col_offset": 17, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 360, "col_offset": 16, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 360, "col_offset": 27, "nodeName": "minres", "type": "Any"}, {"lineNumber": 361, "col_offset": 16, "nodeName": "self", "type": "Test_Storage"}, {"lineNumber": 361, "col_offset": 27, "nodeName": "minres", "type": "Any"}, {"lineNumber": 368, "col_offset": 52, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 370, "col_offset": 28, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 377, "col_offset": 18, "nodeName": "stepsize", "type": "float"}, {"lineNumber": 378, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 379, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 394, "col_offset": 16, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 408, "col_offset": 18, "nodeName": "self", "type": "Test_Metropolis"}, {"lineNumber": 420, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 421, "col_offset": 12, "nodeName": "met", "type": "scipy.optimize._basinhopping.Metropolis"}, {"lineNumber": 427, "col_offset": 46, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 430, "col_offset": 53, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 436, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 437, "col_offset": 23, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 438, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 439, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 440, "col_offset": 16, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 440, "col_offset": 35, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 447, "col_offset": 23, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 448, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 449, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 450, "col_offset": 16, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 450, "col_offset": 35, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 455, "col_offset": 23, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 456, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 457, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 458, "col_offset": 16, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 458, "col_offset": 35, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 463, "col_offset": 23, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 464, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 465, "col_offset": 12, "nodeName": "takestep", "type": "scipy.optimize._basinhopping.AdaptiveStepsize"}, {"lineNumber": 466, "col_offset": 16, "nodeName": "ts", "type": "scipy.optimize._basinhopping.RandomDisplacement"}, {"lineNumber": 466, "col_offset": 35, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 20, "col_offset": 26, "nodeName": "sin", "type": "Any"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 34, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 42, "nodeName": "x", "type": "Any"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "ncalls", "type": "int"}, {"lineNumber": 197, "col_offset": 39, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 197, "col_offset": 47, "nodeName": "i", "type": "int"}, {"lineNumber": 199, "col_offset": 37, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 199, "col_offset": 54, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 200, "col_offset": 39, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 200, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 211, "col_offset": 46, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 211, "col_offset": 54, "nodeName": "i", "type": "int"}, {"lineNumber": 213, "col_offset": 37, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 213, "col_offset": 54, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 217, "col_offset": 39, "nodeName": "self", "type": "TestBasinHopping"}, {"lineNumber": 217, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 264, "col_offset": 30, "nodeName": "res", "type": "Any"}, {"lineNumber": 377, "col_offset": 18, "nodeName": "self", "type": "Test_RandomDisplacement"}, {"lineNumber": 439, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 440, "col_offset": 16, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 449, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 450, "col_offset": 16, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 455, "col_offset": 23, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 457, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 458, "col_offset": 16, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 463, "col_offset": 23, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 465, "col_offset": 12, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 466, "col_offset": 16, "nodeName": "self", "type": "Test_AdaptiveStepsize"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 26, "nodeName": "x", "type": "Any"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "self", "type": "MyAcceptTest"}, {"lineNumber": 20, "col_offset": 37, "nodeName": "x", "type": "Any"}, {"lineNumber": 32, "col_offset": 31, "nodeName": "x", "type": "Any"}]