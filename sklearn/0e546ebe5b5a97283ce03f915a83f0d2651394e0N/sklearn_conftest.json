[{"lineNumber": 29, "col_offset": 0, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 54, "col_offset": 0, "nodeName": "pytest_collection_modifyitems", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 94, "col_offset": 0, "nodeName": "pyplot", "type": "Callable[[], Any]"}, {"lineNumber": 114, "col_offset": 0, "nodeName": "pytest_runtest_setup", "type": "Callable[[Any], Any]"}, {"lineNumber": 18, "col_offset": 0, "nodeName": "dataset_fetchers", "type": "Dict[str, Any]"}, {"lineNumber": 44, "col_offset": 0, "nodeName": "fetch_20newsgroups_fxt", "type": "Any"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "fetch_20newsgroups_vectorized_fxt", "type": "Any"}, {"lineNumber": 47, "col_offset": 0, "nodeName": "fetch_california_housing_fxt", "type": "Any"}, {"lineNumber": 48, "col_offset": 0, "nodeName": "fetch_covtype_fxt", "type": "Any"}, {"lineNumber": 49, "col_offset": 0, "nodeName": "fetch_kddcup99_fxt", "type": "Any"}, {"lineNumber": 50, "col_offset": 0, "nodeName": "fetch_olivetti_faces_fxt", "type": "Any"}, {"lineNumber": 51, "col_offset": 0, "nodeName": "fetch_rcv1_fxt", "type": "Any"}, {"lineNumber": 19, "col_offset": 30, "nodeName": "fetch_20newsgroups", "type": "Any"}, {"lineNumber": 20, "col_offset": 41, "nodeName": "fetch_20newsgroups_vectorized", "type": "Any"}, {"lineNumber": 21, "col_offset": 36, "nodeName": "fetch_california_housing", "type": "Any"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "fetch_covtype", "type": "Any"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "fetch_kddcup99", "type": "Any"}, {"lineNumber": 24, "col_offset": 32, "nodeName": "fetch_olivetti_faces", "type": "Any"}, {"lineNumber": 25, "col_offset": 22, "nodeName": "fetch_rcv1", "type": "Any"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "download_if_missing", "type": "bool"}, {"lineNumber": 44, "col_offset": 25, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 44, "col_offset": 40, "nodeName": "fetch_20newsgroups", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 19, "nodeName": "fetch_20newsgroups_vectorized", "type": "Any"}, {"lineNumber": 47, "col_offset": 31, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 47, "col_offset": 46, "nodeName": "fetch_california_housing", "type": "Any"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 48, "col_offset": 35, "nodeName": "fetch_covtype", "type": "Any"}, {"lineNumber": 49, "col_offset": 21, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 49, "col_offset": 36, "nodeName": "fetch_kddcup99", "type": "Any"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 42, "nodeName": "fetch_olivetti_faces", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "_fetch_fixture", "type": "Callable[[Any], Any]"}, {"lineNumber": 51, "col_offset": 32, "nodeName": "fetch_rcv1", "type": "Any"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "run_network_tests", "type": "bool"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "skip_network", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "dataset_features_set", "type": "Set[str]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "datasets_to_download", "type": "Set[nothing]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "item", "type": "Any"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "items", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "worker_id", "type": "str"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "matplotlib", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "pyplot", "type": "Any"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "openmp_threads", "type": "Any"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "threads_per_worker", "type": "Any"}, {"lineNumber": 35, "col_offset": 40, "nodeName": "download_if_missing", "type": "bool"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "fixture", "type": "Any"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "skip", "type": "Any"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 68, "col_offset": 31, "nodeName": "dataset_fetchers", "type": "Dict[str, Any]"}, {"lineNumber": 69, "col_offset": 27, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "item_fixtures", "type": "Set[Any]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "dataset_to_fetch", "type": "Set[Any]"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "run_network_tests", "type": "bool"}, {"lineNumber": 88, "col_offset": 16, "nodeName": "get", "type": "Callable"}, {"lineNumber": 89, "col_offset": 30, "nodeName": "run_network_tests", "type": "bool"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "name", "type": "Any"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "datasets_to_download", "type": "Union[Set[Any], Set[nothing]]"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "importorskip", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "use", "type": "Any"}, {"lineNumber": 109, "col_offset": 13, "nodeName": "importorskip", "type": "Any"}, {"lineNumber": 110, "col_offset": 10, "nodeName": "pyplot", "type": "Any"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "close", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "xdist_worker_count", "type": "int"}, {"lineNumber": 125, "col_offset": 11, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 129, "col_offset": 21, "nodeName": "_openmp_effective_n_threads", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "max", "type": "Callable"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "threadpool_limits", "type": "Any"}, {"lineNumber": 131, "col_offset": 22, "nodeName": "threads_per_worker", "type": "Any"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "get", "type": "Callable"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Union[Any, bool]]"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 40, "col_offset": 34, "nodeName": "wrapped", "type": "Callable[..., Any]"}, {"lineNumber": 62, "col_offset": 24, "nodeName": "get", "type": "Callable"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "mark", "type": "Any"}, {"lineNumber": 74, "col_offset": 24, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 74, "col_offset": 28, "nodeName": "fixturenames", "type": "Any"}, {"lineNumber": 75, "col_offset": 27, "nodeName": "item_fixtures", "type": "Set[Any]"}, {"lineNumber": 75, "col_offset": 43, "nodeName": "dataset_features_set", "type": "Set[str]"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "dataset_to_fetch", "type": "Set[Any]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "datasets_to_download", "type": "Set[Any]"}, {"lineNumber": 80, "col_offset": 36, "nodeName": "dataset_to_fetch", "type": "Set[Any]"}, {"lineNumber": 88, "col_offset": 16, "nodeName": "environ", "type": "os._Environ[str]"}, {"lineNumber": 89, "col_offset": 7, "nodeName": "worker_id", "type": "str"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "matplotlib", "type": "Any"}, {"lineNumber": 109, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "pyplot", "type": "Any"}, {"lineNumber": 124, "col_offset": 29, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 130, "col_offset": 29, "nodeName": "openmp_threads", "type": "Any"}, {"lineNumber": 130, "col_offset": 47, "nodeName": "xdist_worker_count", "type": "int"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "environ", "type": "os._Environ[str]"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "f", "type": "Any"}, {"lineNumber": 62, "col_offset": 24, "nodeName": "environ", "type": "os._Environ[str]"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 72, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, Union[bytearray, str, unicode]], bool]"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "item", "type": "Any"}, {"lineNumber": 74, "col_offset": 28, "nodeName": "item", "type": "Any"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "add_marker", "type": "Any"}, {"lineNumber": 83, "col_offset": 28, "nodeName": "skip_network", "type": "Any"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "environ", "type": "os._Environ[str]"}, {"lineNumber": 37, "col_offset": 22, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 37, "col_offset": 30, "nodeName": "kwargs", "type": "Dict[str, Union[Any, bool]]"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "item", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "dataset_fetchers", "type": "Dict[str, Any]"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "os", "type": "module"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "name", "type": "Any"}]