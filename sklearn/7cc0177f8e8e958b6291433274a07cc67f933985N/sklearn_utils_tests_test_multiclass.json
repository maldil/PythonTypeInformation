[{"lineNumber": 153, "col_offset": 0, "nodeName": "test_unique_labels", "type": "Callable[[], Any]"}, {"lineNumber": 189, "col_offset": 0, "nodeName": "test_unique_labels_non_specific", "type": "Callable[[], Any]"}, {"lineNumber": 209, "col_offset": 0, "nodeName": "test_unique_labels_mixed_types", "type": "Callable[[], Any]"}, {"lineNumber": 234, "col_offset": 0, "nodeName": "test_is_multilabel", "type": "Callable[[], Any]"}, {"lineNumber": 274, "col_offset": 0, "nodeName": "test_check_classification_targets", "type": "Callable[[], Any]"}, {"lineNumber": 287, "col_offset": 0, "nodeName": "test_type_of_target", "type": "Callable[[], Any]"}, {"lineNumber": 307, "col_offset": 0, "nodeName": "test_type_of_target_pandas_sparse", "type": "Callable[[], Any]"}, {"lineNumber": 321, "col_offset": 0, "nodeName": "test_class_distribution", "type": "Callable[[], Any]"}, {"lineNumber": 377, "col_offset": 0, "nodeName": "test_safe_split_with_precomputed_kernel", "type": "Callable[[], Any]"}, {"lineNumber": 399, "col_offset": 0, "nodeName": "test_ovr_decision_function", "type": "Callable[[], Any]"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 136, "col_offset": 0, "nodeName": "NON_ARRAY_LIKE_EXAMPLES", "type": "List[Optional[Union[Set[int], Dict[int, str], Dict[int, List[int]], str, FrozenSet[int]]]]"}, {"lineNumber": 145, "col_offset": 0, "nodeName": "MULTILABEL_SEQUENCES", "type": "List[Union[List[List[int]], List[Union[Tuple[()], int, Tuple[int, int]]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "format", "type": "str"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "example", "type": "Optional[Union[Set[int], Dict[int, str], Dict[int, List[int]], str, FrozenSet[int]]]"}, {"lineNumber": 198, "col_offset": 19, "nodeName": "NON_ARRAY_LIKE_EXAMPLES", "type": "List[Optional[Union[Set[int], Dict[int, str], Dict[int, List[int]], str, FrozenSet[int]]]]"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "mix_clf_format", "type": "Any"}, {"lineNumber": 215, "col_offset": 38, "nodeName": "mix_clf_format", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "y_type", "type": "str"}, {"lineNumber": 294, "col_offset": 8, "nodeName": "example", "type": "Optional[Union[Set[int], Dict[int, str], Dict[int, List[int]], str, FrozenSet[int]]]"}, {"lineNumber": 294, "col_offset": 19, "nodeName": "NON_ARRAY_LIKE_EXAMPLES", "type": "List[Optional[Union[Set[int], Dict[int, str], Dict[int, List[int]], str, FrozenSet[int]]]]"}, {"lineNumber": 299, "col_offset": 8, "nodeName": "example", "type": "Union[List[List[int]], List[Union[Tuple[()], int, Tuple[int, int]]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 299, "col_offset": 19, "nodeName": "MULTILABEL_SEQUENCES", "type": "List[Union[List[List[int]], List[Union[Tuple[()], int, Tuple[int, int]]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]]"}, {"lineNumber": 308, "col_offset": 4, "nodeName": "pd", "type": "Any"}, {"lineNumber": 315, "col_offset": 4, "nodeName": "y", "type": "Any"}, {"lineNumber": 316, "col_offset": 4, "nodeName": "msg", "type": "str"}, {"lineNumber": 322, "col_offset": 4, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 329, "col_offset": 4, "nodeName": "data", "type": "numpy.ndarray"}, {"lineNumber": 330, "col_offset": 4, "nodeName": "indices", "type": "numpy.ndarray"}, {"lineNumber": 331, "col_offset": 4, "nodeName": "indptr", "type": "numpy.ndarray"}, {"lineNumber": 332, "col_offset": 4, "nodeName": "y_sp", "type": "Any"}, {"lineNumber": 336, "col_offset": 4, "nodeName": "classes_expected", "type": "List[List[int]]"}, {"lineNumber": 340, "col_offset": 4, "nodeName": "n_classes_expected", "type": "List[int]"}, {"lineNumber": 341, "col_offset": 4, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "k", "type": "int"}, {"lineNumber": 362, "col_offset": 4, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "k", "type": "int"}, {"lineNumber": 378, "col_offset": 4, "nodeName": "clf", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 379, "col_offset": 4, "nodeName": "clfp", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 381, "col_offset": 4, "nodeName": "iris", "type": "Any"}, {"lineNumber": 383, "col_offset": 4, "nodeName": "K", "type": "Any"}, {"lineNumber": 385, "col_offset": 4, "nodeName": "cv", "type": "sklearn.model_selection._split.ShuffleSplit"}, {"lineNumber": 402, "col_offset": 4, "nodeName": "predictions", "type": "numpy.ndarray"}, {"lineNumber": 407, "col_offset": 4, "nodeName": "confidences", "type": "numpy.ndarray"}, {"lineNumber": 412, "col_offset": 4, "nodeName": "n_classes", "type": "int"}, {"lineNumber": 414, "col_offset": 4, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 417, "col_offset": 4, "nodeName": "votes", "type": "numpy.ndarray"}, {"lineNumber": 427, "col_offset": 4, "nodeName": "expected_prediction", "type": "numpy.ndarray"}, {"lineNumber": 435, "col_offset": 4, "nodeName": "dec_values_one", "type": "List[Any]"}, {"lineNumber": 141, "col_offset": 4, "nodeName": "frozenset", "type": "Type[FrozenSet[Any]]"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "_NotAnArray", "type": "Type[sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 161, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 169, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "y", "type": "Any"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "example", "type": "Any"}, {"lineNumber": 211, "col_offset": 21, "nodeName": "product", "type": "Callable"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "y_multilabel", "type": "Any"}, {"lineNumber": 215, "col_offset": 22, "nodeName": "y_multiclass", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "group", "type": "str"}, {"lineNumber": 235, "col_offset": 15, "nodeName": "group_examples", "type": "Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]"}, {"lineNumber": 235, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 241, "col_offset": 12, "nodeName": "example", "type": "Any"}, {"lineNumber": 241, "col_offset": 23, "nodeName": "group_examples", "type": "Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]"}, {"lineNumber": 275, "col_offset": 18, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "group", "type": "str"}, {"lineNumber": 288, "col_offset": 15, "nodeName": "group_examples", "type": "Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]"}, {"lineNumber": 288, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 289, "col_offset": 12, "nodeName": "example", "type": "Any"}, {"lineNumber": 289, "col_offset": 23, "nodeName": "group_examples", "type": "Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "msg_regex", "type": "str"}, {"lineNumber": 300, "col_offset": 8, "nodeName": "msg", "type": "str"}, {"lineNumber": 308, "col_offset": 9, "nodeName": "importorskip", "type": "Any"}, {"lineNumber": 311, "col_offset": 8, "nodeName": "pd_sparse_array", "type": "Any"}, {"lineNumber": 311, "col_offset": 26, "nodeName": "SparseArray", "type": "Any"}, {"lineNumber": 313, "col_offset": 8, "nodeName": "pd_sparse_array", "type": "Any"}, {"lineNumber": 313, "col_offset": 26, "nodeName": "SparseArray", "type": "Any"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "pd_sparse_array", "type": "Any"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 329, "col_offset": 11, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 330, "col_offset": 14, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 331, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 332, "col_offset": 11, "nodeName": "csc_matrix", "type": "Any"}, {"lineNumber": 334, "col_offset": 4, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 334, "col_offset": 13, "nodeName": "n_classes", "type": "List[Any]"}, {"lineNumber": 334, "col_offset": 24, "nodeName": "class_prior", "type": "List[Any]"}, {"lineNumber": 334, "col_offset": 38, "nodeName": "class_distribution", "type": "Callable[..., Tuple[List[Any], List[Any], List[Any]]]"}, {"lineNumber": 334, "col_offset": 57, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 335, "col_offset": 4, "nodeName": "classes_sp", "type": "List[Any]"}, {"lineNumber": 335, "col_offset": 16, "nodeName": "n_classes_sp", "type": "List[Any]"}, {"lineNumber": 335, "col_offset": 30, "nodeName": "class_prior_sp", "type": "List[Any]"}, {"lineNumber": 335, "col_offset": 47, "nodeName": "class_distribution", "type": "Callable[..., Tuple[List[Any], List[Any], List[Any]]]"}, {"lineNumber": 335, "col_offset": 66, "nodeName": "y_sp", "type": "Any"}, {"lineNumber": 346, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 356, "col_offset": 5, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 357, "col_offset": 5, "nodeName": "n_classes", "type": "List[Any]"}, {"lineNumber": 358, "col_offset": 5, "nodeName": "class_prior", "type": "List[Any]"}, {"lineNumber": 358, "col_offset": 20, "nodeName": "class_distribution", "type": "Callable[..., Tuple[List[Any], List[Any], List[Any]]]"}, {"lineNumber": 358, "col_offset": 39, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 359, "col_offset": 5, "nodeName": "classes_sp", "type": "List[Any]"}, {"lineNumber": 360, "col_offset": 5, "nodeName": "n_classes_sp", "type": "List[Any]"}, {"lineNumber": 361, "col_offset": 5, "nodeName": "class_prior_sp", "type": "List[Any]"}, {"lineNumber": 361, "col_offset": 23, "nodeName": "class_distribution", "type": "Callable[..., Tuple[List[Any], List[Any], List[Any]]]"}, {"lineNumber": 361, "col_offset": 42, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 367, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 378, "col_offset": 10, "nodeName": "SVC", "type": "Type[sklearn.svm._classes.SVC]"}, {"lineNumber": 379, "col_offset": 11, "nodeName": "SVC", "type": "Type[sklearn.svm._classes.SVC]"}, {"lineNumber": 381, "col_offset": 11, "nodeName": "load_iris", "type": "Callable[..., Any]"}, {"lineNumber": 382, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 382, "col_offset": 7, "nodeName": "y", "type": "Any"}, {"lineNumber": 382, "col_offset": 11, "nodeName": "data", "type": "Any"}, {"lineNumber": 382, "col_offset": 22, "nodeName": "target", "type": "Any"}, {"lineNumber": 383, "col_offset": 8, "nodeName": "dot", "type": "Any"}, {"lineNumber": 383, "col_offset": 15, "nodeName": "X", "type": "Any"}, {"lineNumber": 383, "col_offset": 18, "nodeName": "T", "type": "Any"}, {"lineNumber": 385, "col_offset": 9, "nodeName": "ShuffleSplit", "type": "Type[sklearn.model_selection._split.ShuffleSplit]"}, {"lineNumber": 386, "col_offset": 4, "nodeName": "train", "type": "Any"}, {"lineNumber": 386, "col_offset": 11, "nodeName": "test", "type": "Any"}, {"lineNumber": 388, "col_offset": 4, "nodeName": "X_train", "type": "Any"}, {"lineNumber": 388, "col_offset": 13, "nodeName": "y_train", "type": "Any"}, {"lineNumber": 388, "col_offset": 23, "nodeName": "_safe_split", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 388, "col_offset": 35, "nodeName": "clf", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 388, "col_offset": 40, "nodeName": "X", "type": "Any"}, {"lineNumber": 388, "col_offset": 43, "nodeName": "y", "type": "Any"}, {"lineNumber": 388, "col_offset": 46, "nodeName": "train", "type": "Any"}, {"lineNumber": 389, "col_offset": 4, "nodeName": "K_train", "type": "Any"}, {"lineNumber": 389, "col_offset": 13, "nodeName": "y_train2", "type": "Any"}, {"lineNumber": 389, "col_offset": 24, "nodeName": "_safe_split", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 389, "col_offset": 36, "nodeName": "clfp", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 389, "col_offset": 42, "nodeName": "K", "type": "Any"}, {"lineNumber": 389, "col_offset": 45, "nodeName": "y", "type": "Any"}, {"lineNumber": 389, "col_offset": 48, "nodeName": "train", "type": "Any"}, {"lineNumber": 390, "col_offset": 4, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 390, "col_offset": 30, "nodeName": "K_train", "type": "Any"}, {"lineNumber": 391, "col_offset": 4, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 391, "col_offset": 30, "nodeName": "y_train", "type": "Any"}, {"lineNumber": 391, "col_offset": 39, "nodeName": "y_train2", "type": "Any"}, {"lineNumber": 393, "col_offset": 4, "nodeName": "X_test", "type": "Any"}, {"lineNumber": 393, "col_offset": 12, "nodeName": "y_test", "type": "Any"}, {"lineNumber": 393, "col_offset": 21, "nodeName": "_safe_split", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 393, "col_offset": 33, "nodeName": "clf", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 393, "col_offset": 38, "nodeName": "X", "type": "Any"}, {"lineNumber": 393, "col_offset": 41, "nodeName": "y", "type": "Any"}, {"lineNumber": 393, "col_offset": 44, "nodeName": "test", "type": "Any"}, {"lineNumber": 393, "col_offset": 50, "nodeName": "train", "type": "Any"}, {"lineNumber": 394, "col_offset": 4, "nodeName": "K_test", "type": "Any"}, {"lineNumber": 394, "col_offset": 12, "nodeName": "y_test2", "type": "Any"}, {"lineNumber": 394, "col_offset": 22, "nodeName": "_safe_split", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 394, "col_offset": 34, "nodeName": "clfp", "type": "sklearn.svm._classes.SVC"}, {"lineNumber": 394, "col_offset": 40, "nodeName": "K", "type": "Any"}, {"lineNumber": 394, "col_offset": 43, "nodeName": "y", "type": "Any"}, {"lineNumber": 394, "col_offset": 46, "nodeName": "test", "type": "Any"}, {"lineNumber": 394, "col_offset": 52, "nodeName": "train", "type": "Any"}, {"lineNumber": 395, "col_offset": 4, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 395, "col_offset": 30, "nodeName": "K_test", "type": "Any"}, {"lineNumber": 396, "col_offset": 4, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 396, "col_offset": 30, "nodeName": "y_test", "type": "Any"}, {"lineNumber": 396, "col_offset": 38, "nodeName": "y_test2", "type": "Any"}, {"lineNumber": 402, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 407, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 414, "col_offset": 17, "nodeName": "_ovr_decision_function", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 414, "col_offset": 40, "nodeName": "predictions", "type": "numpy.ndarray"}, {"lineNumber": 414, "col_offset": 53, "nodeName": "confidences", "type": "numpy.ndarray"}, {"lineNumber": 414, "col_offset": 66, "nodeName": "n_classes", "type": "int"}, {"lineNumber": 417, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 422, "col_offset": 4, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 422, "col_offset": 20, "nodeName": "votes", "type": "numpy.ndarray"}, {"lineNumber": 422, "col_offset": 27, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 427, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 428, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 428, "col_offset": 54, "nodeName": "expected_prediction", "type": "numpy.ndarray"}, {"lineNumber": 439, "col_offset": 4, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 439, "col_offset": 20, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 439, "col_offset": 32, "nodeName": "dec_values_one", "type": "List[Any]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "_NotAnArray", "type": "Type[sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "_NotAnArray", "type": "Type[sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "_NotAnArray", "type": "Type[sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "_NotAnArray", "type": "Type[sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 149, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 155, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 155, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 159, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 159, "col_offset": 49, "nodeName": "arange", "type": "Any"}, {"lineNumber": 160, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 160, "col_offset": 53, "nodeName": "arange", "type": "Any"}, {"lineNumber": 161, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 161, "col_offset": 49, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 164, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 167, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 169, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 171, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 174, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 175, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 176, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 177, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 180, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 180, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 182, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 182, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 185, "col_offset": 23, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 186, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 194, "col_offset": 17, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 204, "col_offset": 23, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 211, "col_offset": 29, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 221, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 221, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 224, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 224, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 227, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 227, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 230, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 230, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 235, "col_offset": 33, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 236, "col_offset": 11, "nodeName": "group", "type": "str"}, {"lineNumber": 237, "col_offset": 12, "nodeName": "dense_exp", "type": "bool"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "dense_exp", "type": "bool"}, {"lineNumber": 275, "col_offset": 18, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 276, "col_offset": 11, "nodeName": "y_type", "type": "str"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "example", "type": "Any"}, {"lineNumber": 282, "col_offset": 16, "nodeName": "example", "type": "Any"}, {"lineNumber": 288, "col_offset": 33, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 308, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 310, "col_offset": 7, "nodeName": "parse_version", "type": "Any"}, {"lineNumber": 310, "col_offset": 21, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 310, "col_offset": 40, "nodeName": "parse_version", "type": "Any"}, {"lineNumber": 311, "col_offset": 26, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 313, "col_offset": 26, "nodeName": "pd", "type": "Any"}, {"lineNumber": 315, "col_offset": 28, "nodeName": "nan", "type": "Any"}, {"lineNumber": 315, "col_offset": 36, "nodeName": "nan", "type": "Any"}, {"lineNumber": 315, "col_offset": 47, "nodeName": "nan", "type": "Any"}, {"lineNumber": 317, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 317, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "type_of_target", "type": "Callable[[Any], str]"}, {"lineNumber": 318, "col_offset": 23, "nodeName": "y", "type": "Any"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 329, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 330, "col_offset": 14, "nodeName": "np", "type": "module"}, {"lineNumber": 331, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 332, "col_offset": 11, "nodeName": "sp", "type": "Any"}, {"lineNumber": 332, "col_offset": 26, "nodeName": "data", "type": "numpy.ndarray"}, {"lineNumber": 332, "col_offset": 32, "nodeName": "indices", "type": "numpy.ndarray"}, {"lineNumber": 332, "col_offset": 41, "nodeName": "indptr", "type": "numpy.ndarray"}, {"lineNumber": 346, "col_offset": 19, "nodeName": "shape", "type": "Tuple[int, ...]"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 352, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 353, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 367, "col_offset": 19, "nodeName": "shape", "type": "Tuple[int, ...]"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 374, "col_offset": 8, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 381, "col_offset": 11, "nodeName": "datasets", "type": "module"}, {"lineNumber": 382, "col_offset": 11, "nodeName": "iris", "type": "Any"}, {"lineNumber": 382, "col_offset": 22, "nodeName": "iris", "type": "Any"}, {"lineNumber": 383, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 383, "col_offset": 18, "nodeName": "X", "type": "Any"}, {"lineNumber": 386, "col_offset": 18, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 390, "col_offset": 39, "nodeName": "dot", "type": "Any"}, {"lineNumber": 390, "col_offset": 46, "nodeName": "X_train", "type": "Any"}, {"lineNumber": 390, "col_offset": 55, "nodeName": "T", "type": "Any"}, {"lineNumber": 395, "col_offset": 38, "nodeName": "dot", "type": "Any"}, {"lineNumber": 395, "col_offset": 45, "nodeName": "X_test", "type": "Any"}, {"lineNumber": 395, "col_offset": 53, "nodeName": "T", "type": "Any"}, {"lineNumber": 402, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 407, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 417, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 427, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 428, "col_offset": 23, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 428, "col_offset": 33, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 432, "col_offset": 12, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 432, "col_offset": 31, "nodeName": "dec_values", "type": "Any"}, {"lineNumber": 437, "col_offset": 63, "nodeName": "i", "type": "int"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "randint", "type": "Any"}, {"lineNumber": 40, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 43, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 46, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 47, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 52, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 57, "col_offset": 34, "nodeName": "int8", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 58, "col_offset": 34, "nodeName": "uint8", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 60, "col_offset": 34, "nodeName": "float32", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 67, "col_offset": 40, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 73, "col_offset": 53, "nodeName": "int8", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 74, "col_offset": 53, "nodeName": "uint8", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 75, "col_offset": 53, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 76, "col_offset": 53, "nodeName": "float32", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 79, "col_offset": 49, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 89, "col_offset": 55, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 90, "col_offset": 55, "nodeName": "int8", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 91, "col_offset": 55, "nodeName": "uint8", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 92, "col_offset": 55, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 93, "col_offset": 55, "nodeName": "float32", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 39, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 36, "nodeName": "float32", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 43, "nodeName": "float32", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 120, "col_offset": 60, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 121, "col_offset": 9, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 123, "col_offset": 9, "nodeName": "frozenset", "type": "Type[FrozenSet[Any]]"}, {"lineNumber": 123, "col_offset": 31, "nodeName": "frozenset", "type": "Type[FrozenSet[Any]]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 149, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 155, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 159, "col_offset": 37, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 159, "col_offset": 49, "nodeName": "np", "type": "module"}, {"lineNumber": 160, "col_offset": 37, "nodeName": "arange", "type": "Any"}, {"lineNumber": 160, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 161, "col_offset": 49, "nodeName": "np", "type": "module"}, {"lineNumber": 164, "col_offset": 37, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 167, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 169, "col_offset": 37, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 171, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 174, "col_offset": 48, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 175, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 177, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 180, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 181, "col_offset": 33, "nodeName": "ones", "type": "Any"}, {"lineNumber": 182, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 183, "col_offset": 22, "nodeName": "ones", "type": "Any"}, {"lineNumber": 183, "col_offset": 39, "nodeName": "ones", "type": "Any"}, {"lineNumber": 185, "col_offset": 37, "nodeName": "ones", "type": "Any"}, {"lineNumber": 185, "col_offset": 54, "nodeName": "ones", "type": "Any"}, {"lineNumber": 186, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 194, "col_offset": 26, "nodeName": "format", "type": "str"}, {"lineNumber": 195, "col_offset": 12, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "y", "type": "Any"}, {"lineNumber": 199, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 199, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 200, "col_offset": 12, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "example", "type": "Any"}, {"lineNumber": 204, "col_offset": 32, "nodeName": "y_type", "type": "str"}, {"lineNumber": 212, "col_offset": 29, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 213, "col_offset": 29, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 216, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 217, "col_offset": 26, "nodeName": "y_multiclass", "type": "Any"}, {"lineNumber": 217, "col_offset": 40, "nodeName": "y_multilabel", "type": "Any"}, {"lineNumber": 218, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 218, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 219, "col_offset": 12, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 219, "col_offset": 26, "nodeName": "y_multilabel", "type": "Any"}, {"lineNumber": 219, "col_offset": 40, "nodeName": "y_multiclass", "type": "Any"}, {"lineNumber": 221, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 224, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 227, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 230, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 245, "col_offset": 16, "nodeName": "sparse_exp", "type": "bool"}, {"lineNumber": 247, "col_offset": 16, "nodeName": "sparse_exp", "type": "bool"}, {"lineNumber": 254, "col_offset": 16, "nodeName": "examples_sparse", "type": "List[Any]"}, {"lineNumber": 260, "col_offset": 20, "nodeName": "exmpl_sparse", "type": "Any"}, {"lineNumber": 260, "col_offset": 36, "nodeName": "examples_sparse", "type": "List[Any]"}, {"lineNumber": 266, "col_offset": 15, "nodeName": "issparse", "type": "Any"}, {"lineNumber": 266, "col_offset": 24, "nodeName": "example", "type": "Any"}, {"lineNumber": 267, "col_offset": 16, "nodeName": "example", "type": "Any"}, {"lineNumber": 269, "col_offset": 19, "nodeName": "dense_exp", "type": "bool"}, {"lineNumber": 277, "col_offset": 27, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 278, "col_offset": 16, "nodeName": "msg", "type": "str"}, {"lineNumber": 282, "col_offset": 27, "nodeName": "EXAMPLES", "type": "Dict[str, Union[List[Union[List[List[nothing]], List[Tuple[()]], numpy.ndarray, List[numpy.ndarray], List[Set[int]], List[FrozenSet[int]], List[Dict[int, str]]]], List[numpy.ndarray], List[Union[List[float], List[Union[int, float]], numpy.ndarray]], List[Union[List[int], List[nothing], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Union[List[List[int]], List[List[str]], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray]], List[Union[List[int], numpy.ndarray, sklearn.utils.estimator_checks._NotAnArray, List[str]]], List[Any]]]"}, {"lineNumber": 290, "col_offset": 46, "nodeName": "group", "type": "str"}, {"lineNumber": 296, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 296, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 297, "col_offset": 12, "nodeName": "type_of_target", "type": "Callable[[Any], str]"}, {"lineNumber": 297, "col_offset": 27, "nodeName": "example", "type": "Any"}, {"lineNumber": 303, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 303, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 304, "col_offset": 12, "nodeName": "type_of_target", "type": "Callable[[Any], str]"}, {"lineNumber": 304, "col_offset": 27, "nodeName": "example", "type": "Union[numpy.ndarray, List[List[int]], List[Union[Tuple[()], int, Tuple[int, int]]], sklearn.utils.estimator_checks._NotAnArray]"}, {"lineNumber": 310, "col_offset": 21, "nodeName": "pd", "type": "Any"}, {"lineNumber": 311, "col_offset": 26, "nodeName": "pd", "type": "Any"}, {"lineNumber": 315, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 315, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 315, "col_offset": 47, "nodeName": "np", "type": "module"}, {"lineNumber": 317, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 317, "col_offset": 41, "nodeName": "msg", "type": "str"}, {"lineNumber": 346, "col_offset": 19, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 347, "col_offset": 34, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 347, "col_offset": 46, "nodeName": "classes_expected", "type": "List[List[int]]"}, {"lineNumber": 348, "col_offset": 34, "nodeName": "n_classes", "type": "List[Any]"}, {"lineNumber": 348, "col_offset": 48, "nodeName": "n_classes_expected", "type": "List[int]"}, {"lineNumber": 349, "col_offset": 34, "nodeName": "class_prior", "type": "List[Any]"}, {"lineNumber": 349, "col_offset": 50, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 351, "col_offset": 34, "nodeName": "classes_sp", "type": "List[Any]"}, {"lineNumber": 351, "col_offset": 49, "nodeName": "classes_expected", "type": "List[List[int]]"}, {"lineNumber": 352, "col_offset": 34, "nodeName": "n_classes_sp", "type": "List[Any]"}, {"lineNumber": 352, "col_offset": 51, "nodeName": "n_classes_expected", "type": "List[int]"}, {"lineNumber": 353, "col_offset": 34, "nodeName": "class_prior_sp", "type": "List[Any]"}, {"lineNumber": 353, "col_offset": 53, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 367, "col_offset": 19, "nodeName": "y", "type": "numpy.ndarray"}, {"lineNumber": 368, "col_offset": 34, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 368, "col_offset": 46, "nodeName": "classes_expected", "type": "List[List[int]]"}, {"lineNumber": 369, "col_offset": 34, "nodeName": "n_classes", "type": "List[Any]"}, {"lineNumber": 369, "col_offset": 48, "nodeName": "n_classes_expected", "type": "List[int]"}, {"lineNumber": 370, "col_offset": 34, "nodeName": "class_prior", "type": "List[Any]"}, {"lineNumber": 370, "col_offset": 50, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 372, "col_offset": 34, "nodeName": "classes_sp", "type": "List[Any]"}, {"lineNumber": 372, "col_offset": 49, "nodeName": "classes_expected", "type": "List[List[int]]"}, {"lineNumber": 373, "col_offset": 34, "nodeName": "n_classes_sp", "type": "List[Any]"}, {"lineNumber": 373, "col_offset": 51, "nodeName": "n_classes_expected", "type": "List[int]"}, {"lineNumber": 374, "col_offset": 34, "nodeName": "class_prior_sp", "type": "List[Any]"}, {"lineNumber": 374, "col_offset": 53, "nodeName": "class_prior_expected", "type": "List[List[float]]"}, {"lineNumber": 386, "col_offset": 23, "nodeName": "split", "type": "Callable[..., Generator[Tuple[Any, Any], Any, None]]"}, {"lineNumber": 386, "col_offset": 32, "nodeName": "X", "type": "Any"}, {"lineNumber": 390, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 390, "col_offset": 55, "nodeName": "X_train", "type": "Any"}, {"lineNumber": 395, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 395, "col_offset": 53, "nodeName": "X_train", "type": "Any"}, {"lineNumber": 428, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 437, "col_offset": 45, "nodeName": "n_classes", "type": "int"}, {"lineNumber": 437, "col_offset": 68, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 40, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 41, "col_offset": 52, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 42, "col_offset": 52, "nodeName": "int8", "type": "Any"}, {"lineNumber": 43, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 43, "col_offset": 52, "nodeName": "uint8", "type": "Any"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 44, "col_offset": 52, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 52, "nodeName": "float32", "type": "Any"}, {"lineNumber": 46, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 47, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 52, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 57, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 58, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 60, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 73, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 74, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 76, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 90, "col_offset": 55, "nodeName": "np", "type": "module"}, {"lineNumber": 91, "col_offset": 55, "nodeName": "np", "type": "module"}, {"lineNumber": 93, "col_offset": 55, "nodeName": "np", "type": "module"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 43, "nodeName": "np", "type": "module"}, {"lineNumber": 120, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 120, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 121, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 160, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 164, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 169, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 181, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 183, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 183, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 185, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 185, "col_offset": 54, "nodeName": "np", "type": "module"}, {"lineNumber": 199, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 205, "col_offset": 17, "nodeName": "raises", "type": "Any"}, {"lineNumber": 205, "col_offset": 31, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 206, "col_offset": 16, "nodeName": "unique_labels", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 206, "col_offset": 30, "nodeName": "example", "type": "Any"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 218, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 244, "col_offset": 15, "nodeName": "group", "type": "str"}, {"lineNumber": 244, "col_offset": 51, "nodeName": "issparse", "type": "Any"}, {"lineNumber": 244, "col_offset": 60, "nodeName": "example", "type": "Any"}, {"lineNumber": 249, "col_offset": 16, "nodeName": "issparse", "type": "Any"}, {"lineNumber": 249, "col_offset": 25, "nodeName": "example", "type": "Any"}, {"lineNumber": 267, "col_offset": 26, "nodeName": "toarray", "type": "Any"}, {"lineNumber": 269, "col_offset": 32, "nodeName": "is_multilabel", "type": "Callable[[Any], Any]"}, {"lineNumber": 269, "col_offset": 46, "nodeName": "example", "type": "Any"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "example", "type": "Any"}, {"lineNumber": 271, "col_offset": 32, "nodeName": "dense_exp", "type": "bool"}, {"lineNumber": 277, "col_offset": 36, "nodeName": "y_type", "type": "str"}, {"lineNumber": 282, "col_offset": 36, "nodeName": "y_type", "type": "str"}, {"lineNumber": 283, "col_offset": 16, "nodeName": "check_classification_targets", "type": "Callable[[Any], None]"}, {"lineNumber": 283, "col_offset": 45, "nodeName": "example", "type": "Any"}, {"lineNumber": 290, "col_offset": 19, "nodeName": "type_of_target", "type": "Callable[[Any], str]"}, {"lineNumber": 290, "col_offset": 34, "nodeName": "example", "type": "Any"}, {"lineNumber": 292, "col_offset": 19, "nodeName": "example", "type": "Any"}, {"lineNumber": 292, "col_offset": 28, "nodeName": "group", "type": "str"}, {"lineNumber": 296, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 296, "col_offset": 45, "nodeName": "msg_regex", "type": "str"}, {"lineNumber": 303, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 303, "col_offset": 45, "nodeName": "msg", "type": "str"}, {"lineNumber": 347, "col_offset": 42, "nodeName": "k", "type": "int"}, {"lineNumber": 347, "col_offset": 63, "nodeName": "k", "type": "int"}, {"lineNumber": 348, "col_offset": 44, "nodeName": "k", "type": "int"}, {"lineNumber": 348, "col_offset": 67, "nodeName": "k", "type": "int"}, {"lineNumber": 349, "col_offset": 46, "nodeName": "k", "type": "int"}, {"lineNumber": 349, "col_offset": 71, "nodeName": "k", "type": "int"}, {"lineNumber": 351, "col_offset": 45, "nodeName": "k", "type": "int"}, {"lineNumber": 351, "col_offset": 66, "nodeName": "k", "type": "int"}, {"lineNumber": 352, "col_offset": 47, "nodeName": "k", "type": "int"}, {"lineNumber": 352, "col_offset": 70, "nodeName": "k", "type": "int"}, {"lineNumber": 353, "col_offset": 49, "nodeName": "k", "type": "int"}, {"lineNumber": 353, "col_offset": 74, "nodeName": "k", "type": "int"}, {"lineNumber": 368, "col_offset": 42, "nodeName": "k", "type": "int"}, {"lineNumber": 368, "col_offset": 63, "nodeName": "k", "type": "int"}, {"lineNumber": 369, "col_offset": 44, "nodeName": "k", "type": "int"}, {"lineNumber": 369, "col_offset": 67, "nodeName": "k", "type": "int"}, {"lineNumber": 370, "col_offset": 46, "nodeName": "k", "type": "int"}, {"lineNumber": 370, "col_offset": 71, "nodeName": "k", "type": "int"}, {"lineNumber": 372, "col_offset": 45, "nodeName": "k", "type": "int"}, {"lineNumber": 372, "col_offset": 66, "nodeName": "k", "type": "int"}, {"lineNumber": 373, "col_offset": 47, "nodeName": "k", "type": "int"}, {"lineNumber": 373, "col_offset": 70, "nodeName": "k", "type": "int"}, {"lineNumber": 374, "col_offset": 49, "nodeName": "k", "type": "int"}, {"lineNumber": 374, "col_offset": 74, "nodeName": "k", "type": "int"}, {"lineNumber": 386, "col_offset": 23, "nodeName": "cv", "type": "sklearn.model_selection._split.ShuffleSplit"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "RandomState", "type": "Any"}, {"lineNumber": 42, "col_offset": 52, "nodeName": "np", "type": "module"}, {"lineNumber": 43, "col_offset": 52, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 52, "nodeName": "np", "type": "module"}, {"lineNumber": 120, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 120, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 205, "col_offset": 17, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 250, "col_offset": 25, "nodeName": "example", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "ndim", "type": "Any"}, {"lineNumber": 252, "col_offset": 17, "nodeName": "kind", "type": "Any"}, {"lineNumber": 261, "col_offset": 27, "nodeName": "sparse_exp", "type": "bool"}, {"lineNumber": 267, "col_offset": 26, "nodeName": "example", "type": "Any"}, {"lineNumber": 279, "col_offset": 21, "nodeName": "raises", "type": "Any"}, {"lineNumber": 279, "col_offset": 35, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 280, "col_offset": 20, "nodeName": "check_classification_targets", "type": "Callable[[Any], None]"}, {"lineNumber": 280, "col_offset": 49, "nodeName": "example", "type": "Any"}, {"lineNumber": 292, "col_offset": 35, "nodeName": "type_of_target", "type": "Callable[[Any], str]"}, {"lineNumber": 292, "col_offset": 50, "nodeName": "example", "type": "Any"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "random", "type": "Any"}, {"lineNumber": 252, "col_offset": 17, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 253, "col_offset": 17, "nodeName": "shape", "type": "Tuple[int, ...]"}, {"lineNumber": 255, "col_offset": 57, "nodeName": "coo_matrix", "type": "Any"}, {"lineNumber": 256, "col_offset": 57, "nodeName": "csc_matrix", "type": "Any"}, {"lineNumber": 257, "col_offset": 57, "nodeName": "csr_matrix", "type": "Any"}, {"lineNumber": 258, "col_offset": 57, "nodeName": "dok_matrix", "type": "Any"}, {"lineNumber": 259, "col_offset": 57, "nodeName": "lil_matrix", "type": "Any"}, {"lineNumber": 261, "col_offset": 41, "nodeName": "is_multilabel", "type": "Callable[[Any], Any]"}, {"lineNumber": 261, "col_offset": 55, "nodeName": "exmpl_sparse", "type": "Any"}, {"lineNumber": 263, "col_offset": 31, "nodeName": "exmpl_sparse", "type": "Any"}, {"lineNumber": 263, "col_offset": 45, "nodeName": "sparse_exp", "type": "bool"}, {"lineNumber": 279, "col_offset": 21, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 279, "col_offset": 53, "nodeName": "msg", "type": "str"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "asarray", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 251, "col_offset": 28, "nodeName": "example", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 252, "col_offset": 17, "nodeName": "asarray", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 252, "col_offset": 28, "nodeName": "example", "type": "Any"}, {"lineNumber": 253, "col_offset": 17, "nodeName": "asarray", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 253, "col_offset": 28, "nodeName": "example", "type": "Any"}, {"lineNumber": 252, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 253, "col_offset": 17, "nodeName": "np", "type": "module"}]