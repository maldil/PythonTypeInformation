[{"lineNumber": 11, "col_offset": 17, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "_targets", "type": "Set[Any]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "_contexts", "type": "Set[Any]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "_seen", "type": "collections.defaultdict[Any, Any]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "_displays", "type": "Dict[Tuple[Any, Any], Any]"}, {"lineNumber": 34, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 58, "col_offset": 44, "nodeName": "display", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "result", "type": "List[Union[str, Any]]"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "target", "type": "Any"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "_targets", "type": "Set[Any]"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "result", "type": "List[Union[str, Any]]"}, {"lineNumber": 85, "col_offset": 15, "nodeName": "_targets", "type": "Set[Any]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 29, "col_offset": 24, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 31, "col_offset": 21, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 31, "col_offset": 33, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 35, "col_offset": 44, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 51, "col_offset": 32, "nodeName": "target", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "add", "type": "Callable"}, {"lineNumber": 54, "col_offset": 27, "nodeName": "context", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "add", "type": "Callable"}, {"lineNumber": 55, "col_offset": 26, "nodeName": "target", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "_displays", "type": "Dict[Tuple[Any, Any], Any]"}, {"lineNumber": 68, "col_offset": 16, "nodeName": "c", "type": "Any"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "_displays", "type": "Dict[Tuple[Any, Any], Any]"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "default", "type": "Any"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "x", "type": "Union[Any, str]"}, {"lineNumber": 80, "col_offset": 15, "nodeName": "x", "type": "Union[Any, str]"}, {"lineNumber": 85, "col_offset": 15, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "context", "type": "Any"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 35, "col_offset": 33, "nodeName": "display", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "_contexts", "type": "Set[Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "_targets", "type": "Set[Any]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 68, "col_offset": 22, "nodeName": "c", "type": "Any"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "_contexts", "type": "Set[Any]"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "context", "type": "Any"}, {"lineNumber": 71, "col_offset": 21, "nodeName": "target", "type": "Any"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "_displays", "type": "Dict[Tuple[Any, Any], Any]"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "display", "type": "Callable[..., Any]"}, {"lineNumber": 79, "col_offset": 29, "nodeName": "context", "type": "Any"}, {"lineNumber": 79, "col_offset": 38, "nodeName": "target", "type": "Any"}, {"lineNumber": 36, "col_offset": 16, "nodeName": "add", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "context", "type": "Any"}, {"lineNumber": 36, "col_offset": 34, "nodeName": "target", "type": "Any"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "display", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "_seen", "type": "collections.defaultdict[Any, Any]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 58, "col_offset": 24, "nodeName": "context", "type": "Any"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "target", "type": "Any"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 68, "col_offset": 67, "nodeName": "minimum", "type": "Any"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 81, "col_offset": 30, "nodeName": "x", "type": "Union[Any, str]"}, {"lineNumber": 36, "col_offset": 16, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "context", "type": "Any"}, {"lineNumber": 68, "col_offset": 45, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 72, "col_offset": 35, "nodeName": "context", "type": "Any"}, {"lineNumber": 72, "col_offset": 44, "nodeName": "target", "type": "Any"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "result", "type": "List[Union[str, Any]]"}, {"lineNumber": 68, "col_offset": 49, "nodeName": "_seen", "type": "collections.defaultdict[Any, Any]"}, {"lineNumber": 68, "col_offset": 49, "nodeName": "self", "type": "MinimalSet"}, {"lineNumber": 68, "col_offset": 60, "nodeName": "c", "type": "Any"}]