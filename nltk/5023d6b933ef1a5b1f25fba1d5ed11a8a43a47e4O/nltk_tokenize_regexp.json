[{"lineNumber": 75, "col_offset": 22, "nodeName": "TokenizerI", "type": "Type[nltk.tokenize.api.TokenizerI]"}, {"lineNumber": 156, "col_offset": 26, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 183, "col_offset": 25, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 219, "col_offset": 0, "nodeName": "blankline_tokenize", "type": "Callable[[Any], Any]"}, {"lineNumber": 219, "col_offset": 21, "nodeName": "tokenize", "type": "Callable[[Any], Any]"}, {"lineNumber": 220, "col_offset": 0, "nodeName": "wordpunct_tokenize", "type": "Callable[[Any], Any]"}, {"lineNumber": 220, "col_offset": 21, "nodeName": "tokenize", "type": "Callable[[Any], Any]"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "tokenizer", "type": "RegexpTokenizer"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "pattern", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "_pattern", "type": "Any"}, {"lineNumber": 112, "col_offset": 24, "nodeName": "pattern", "type": "Any"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "_gaps", "type": "bool"}, {"lineNumber": 113, "col_offset": 21, "nodeName": "gaps", "type": "bool"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "_discard_empty", "type": "bool"}, {"lineNumber": 114, "col_offset": 30, "nodeName": "discard_empty", "type": "bool"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "_flags", "type": "int"}, {"lineNumber": 115, "col_offset": 22, "nodeName": "flags", "type": "int"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "_regexp", "type": "None"}, {"lineNumber": 125, "col_offset": 11, "nodeName": "_gaps", "type": "Any"}, {"lineNumber": 138, "col_offset": 11, "nodeName": "_gaps", "type": "Any"}, {"lineNumber": 209, "col_offset": 38, "nodeName": "DOTALL", "type": "int"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 215, "col_offset": 32, "nodeName": "pattern", "type": "Any"}, {"lineNumber": 215, "col_offset": 41, "nodeName": "gaps", "type": "Any"}, {"lineNumber": 215, "col_offset": 47, "nodeName": "discard_empty", "type": "Any"}, {"lineNumber": 215, "col_offset": 62, "nodeName": "flags", "type": "Any"}, {"lineNumber": 216, "col_offset": 11, "nodeName": "tokenize", "type": "Callable[[Any], Any]"}, {"lineNumber": 216, "col_offset": 30, "nodeName": "text", "type": "Any"}, {"lineNumber": 219, "col_offset": 21, "nodeName": "BlanklineTokenizer", "type": "Type[BlanklineTokenizer]"}, {"lineNumber": 220, "col_offset": 21, "nodeName": "WordPunctTokenizer", "type": "Type[WordPunctTokenizer]"}, {"lineNumber": 107, "col_offset": 42, "nodeName": "DOTALL", "type": "int"}, {"lineNumber": 110, "col_offset": 18, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 110, "col_offset": 26, "nodeName": "pattern", "type": "str"}, {"lineNumber": 110, "col_offset": 46, "nodeName": "pattern", "type": "str"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 119, "col_offset": 11, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "_regexp", "type": "Pattern[Any]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "_check_regexp", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 11, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "_discard_empty", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "_check_regexp", "type": "Callable[[], Any]"}, {"lineNumber": 138, "col_offset": 11, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 143, "col_offset": 16, "nodeName": "m", "type": "Match[Any]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., Any]"}, {"lineNumber": 169, "col_offset": 33, "nodeName": "self", "type": "WhitespaceTokenizer"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., Any]"}, {"lineNumber": 180, "col_offset": 33, "nodeName": "self", "type": "BlanklineTokenizer"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., Any]"}, {"lineNumber": 196, "col_offset": 33, "nodeName": "self", "type": "WordPunctTokenizer"}, {"lineNumber": 209, "col_offset": 10, "nodeName": "UNICODE", "type": "int"}, {"lineNumber": 209, "col_offset": 23, "nodeName": "MULTILINE", "type": "int"}, {"lineNumber": 209, "col_offset": 38, "nodeName": "re", "type": "module"}, {"lineNumber": 216, "col_offset": 11, "nodeName": "tokenizer", "type": "RegexpTokenizer"}, {"lineNumber": 107, "col_offset": 14, "nodeName": "UNICODE", "type": "int"}, {"lineNumber": 107, "col_offset": 27, "nodeName": "MULTILINE", "type": "int"}, {"lineNumber": 107, "col_offset": 42, "nodeName": "re", "type": "module"}, {"lineNumber": 119, "col_offset": 11, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 120, "col_offset": 27, "nodeName": "compile", "type": "Callable"}, {"lineNumber": 120, "col_offset": 38, "nodeName": "_pattern", "type": "Any"}, {"lineNumber": 120, "col_offset": 53, "nodeName": "_flags", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 133, "col_offset": 19, "nodeName": "findall", "type": "Any"}, {"lineNumber": 133, "col_offset": 40, "nodeName": "text", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "left", "type": "int"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "right", "type": "int"}, {"lineNumber": 139, "col_offset": 31, "nodeName": "regexp_span_tokenize", "type": "Callable[[Any, Any], Generator[Tuple[int, int], Any, None]]"}, {"lineNumber": 139, "col_offset": 52, "nodeName": "text", "type": "Any"}, {"lineNumber": 139, "col_offset": 58, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 143, "col_offset": 21, "nodeName": "finditer", "type": "Callable"}, {"lineNumber": 143, "col_offset": 33, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 143, "col_offset": 47, "nodeName": "text", "type": "Any"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "__name__", "type": "str"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "_pattern", "type": "Any"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "_gaps", "type": "Any"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "_discard_empty", "type": "Any"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "_flags", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "RegexpTokenizer", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 209, "col_offset": 10, "nodeName": "re", "type": "module"}, {"lineNumber": 209, "col_offset": 23, "nodeName": "re", "type": "module"}, {"lineNumber": 107, "col_offset": 14, "nodeName": "re", "type": "module"}, {"lineNumber": 107, "col_offset": 27, "nodeName": "re", "type": "module"}, {"lineNumber": 120, "col_offset": 27, "nodeName": "re", "type": "module"}, {"lineNumber": 120, "col_offset": 38, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 120, "col_offset": 53, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "tok", "type": "Any"}, {"lineNumber": 129, "col_offset": 23, "nodeName": "split", "type": "Any"}, {"lineNumber": 129, "col_offset": 42, "nodeName": "text", "type": "Any"}, {"lineNumber": 133, "col_offset": 19, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 139, "col_offset": 58, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 143, "col_offset": 21, "nodeName": "re", "type": "module"}, {"lineNumber": 143, "col_offset": 33, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "__class__", "type": "Type[RegexpTokenizer]"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 127, "col_offset": 32, "nodeName": "tok", "type": "Any"}, {"lineNumber": 127, "col_offset": 67, "nodeName": "tok", "type": "Any"}, {"lineNumber": 129, "col_offset": 23, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 133, "col_offset": 19, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "_discard_empty", "type": "Any"}, {"lineNumber": 144, "col_offset": 22, "nodeName": "span", "type": "Callable[..., Tuple[int, int]]"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 127, "col_offset": 39, "nodeName": "split", "type": "Any"}, {"lineNumber": 127, "col_offset": 58, "nodeName": "text", "type": "Any"}, {"lineNumber": 129, "col_offset": 23, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "self", "type": "RegexpTokenizer"}, {"lineNumber": 140, "col_offset": 48, "nodeName": "left", "type": "int"}, {"lineNumber": 140, "col_offset": 56, "nodeName": "right", "type": "int"}, {"lineNumber": 141, "col_offset": 26, "nodeName": "left", "type": "int"}, {"lineNumber": 141, "col_offset": 32, "nodeName": "right", "type": "int"}, {"lineNumber": 144, "col_offset": 22, "nodeName": "m", "type": "Match[Any]"}, {"lineNumber": 127, "col_offset": 39, "nodeName": "_regexp", "type": "Any"}, {"lineNumber": 127, "col_offset": 39, "nodeName": "self", "type": "RegexpTokenizer"}]